#!/usr/bin/env python

from __future__ import print_function

import os, random, subprocess, sys, tempfile
sys.path.insert(0, os.path.join(os.path.dirname(os.path.realpath(__file__)), os.pardir, os.pardir, "common"))
import driver, utils

r = utils.import_python_driver()
dbName, tableName = 'test', 'test'

try:
    xrange
except NameError:
    xrange = range

rethinkdb_exe = sys.argv[1] if len(sys.argv) > 1 else utils.find_rethinkdb_executable()
os.environ['RDB_EXE_PATH'] = rethinkdb_exe

if not os.path.isdir('run'):
    os.makedirs('run')
   
# -- make sure a server is avalible

server = None
serverHost = os.environ.get('RDB_SERVER_HOST')
serverPort = int(os.environ.get('RDB_DRIVER_PORT')) if 'RDB_DRIVER_PORT' in os.environ else None
serverOutput = None
if None in (serverHost, serverPort):
    serverOutput = tempfile.TemporaryFile(mode='w+')
    server = driver.Process(executable_path=rethinkdb_exe, console_output=serverOutput)
    serverHost = server.host
    serverPort = server.driver_port

# -- setup the tables
    
conn = r.connect(host=serverHost, port=serverPort)

if dbName not in r.db_list().run(conn):
    res = r.db_create(dbName).run(conn)
    assert res["tables_created"] == 1

# ensure a clean table

if tableName in r.db(dbName).table_list().run(conn):
    r.db(dbName).table_drop(tableName).run(conn)
res = r.db(dbName).table_create(tableName).run(conn)
assert res["tables_created"] == 1
r.db(dbName).table(tableName).wait().run(conn)

tbl = r.db(dbName).table(tableName)

# -- generate the data

num_rows = random.randint(1111, 2222)
rows_per_cycle = 100
nums = list(range(0, 500))
print("Inserting %d rows of data:" % num_rows, end=' ')
sys.stdout.flush()
for i in range(1, num_rows+1, rows_per_cycle):
    r.range(i, i + min(rows_per_cycle, num_rows - i + 1)).for_each(tbl.insert({'id':r.row, 'nums':nums})).run(conn)
    print('.', end=' ')
    sys.stdout.flush()
print("Done\n")

# -- run the test

sys.exit(subprocess.call([os.environ.get('INTERPRETER_PATH', 'node'), os.path.join(os.path.dirname(__file__), "cursor.js"), str(serverPort), str(num_rows)]))
