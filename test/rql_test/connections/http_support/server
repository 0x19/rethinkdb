#!/usr/bin/env python

from __future__ import print_function

import datetime, os, subprocess, sys, tempfile, time

import twisted.internet
import twisted.internet.ssl
import twisted.web
import twisted.web.static
import twisted.web.wsgi

import httpbin

# --

def runServer(httpbinPort=0, httpPort=0, sslPort=0):

    # -- generate self signed SSL certificate
    
    privateKey = tempfile.NamedTemporaryFile(suffix='.pem')
    subprocess.check_call(['openssl', 'genrsa'], stdout=privateKey, stderr=subprocess.PIPE)
    privateKey.flush()
    
    certificate = tempfile.NamedTemporaryFile(suffix='.pem')
    certificateSettings = tempfile.NamedTemporaryFile(suffix='.pem', mode='w+')
    certificateSettings.write("US\nST=CA\nL=Mountain View\n.\n.\n.\n%s\n.\n" % datetime.datetime.now().strftime('%Y%m%d'))
    certificateSettings.seek(0)
    subprocess.check_call(['openssl', 'req', '-new', '-x509', '-key', privateKey.name, '-days', '1000'], stdin=certificateSettings, stdout=certificate, stderr=subprocess.PIPE)
    certificate.flush()
    
    twisted.internet.reactor.callWhenRunning(lambda: print('''Testing server is running
	httpbin running on:      http://localhost:%d    
	http redirect to https:  http://localhost:%d/redirect
	self-signed certificate: https://localhost:%d/quickstart.png
''' % (httpbinPort, httpPort, sslPort)))
    
    # -- setup endpoints
    
    httpbinEndpoint = twisted.web.wsgi.WSGIResource(twisted.internet.reactor, twisted.internet.reactor.getThreadPool(), httpbin.app)
    
    class LocalContent(twisted.web.resource.Resource):
        
        def getChild(self, name, request):
            if name == '':
                return self
            else:
                return twisted.web.resource.Resource.getChild(self, name, request)
        
        def render_GET(self, request):
            request.setHeader("content-type", "text/plain")
            return "This is the message you came here to see! Woo! Hoo!"
    
    localContenetInstance = LocalContent()
    
    # -- setup the listeners
    
    httpbinListner = twisted.internet.reactor.listenTCP(
        port=httpbinPort, # port
        factory=twisted.web.server.Site(httpbinEndpoint)
    )
    httpbinPort = httpbinListner.getHost().port
    
    redirectListener = twisted.internet.reactor.listenTCP(
        port=httpPort, # port
        factory=twisted.web.server.Site(localContenetInstance)
    )
    httpPort = redirectListener.getHost().port
    
    sslListener = twisted.internet.reactor.listenSSL(
        port=sslPort, # port
        factory=twisted.web.server.Site(localContenetInstance),
        contextFactory = twisted.internet.ssl.DefaultOpenSSLContextFactory(privateKey.name, certificate.name)
    )
    sslPort = sslListener.getHost().port
    
    # -- add the local content
    
    localContenetInstance.putChild('quickstart.png', twisted.web.static.File(os.path.join(os.path.dirname(os.path.realpath(__file__)), 'quickstart.png')))
    localContenetInstance.putChild('redirect',  twisted.web.util.Redirect('https://localhost:%d' % sslPort))
    
    # -- start the server
    
    twisted.internet.reactor.run()

# --

if __name__ == '__main__':
    import optparse
    
    parser = optparse.OptionParser()
    parser.add_option('-b', '--httpbin-port', dest='httpbinPort', type='int', default=0)
    parser.add_option('-p', '--http-port', dest='httpPort', type='int', default=0)
    parser.add_option('-s', '--ssl-port', dest='sslPort', type='int',  default=0)
    
    options, args = parser.parse_args()
    runServer(options.httpbinPort, options.httpPort, options.sslPort)
    