desc: Test basic changefeed operations
table_variable_name: tbl
tests:
    
    # Start an initial group of changefeeds
    - py: even_inserts = tbl.changes().filter((r.row['new_val']['id'] % 2).eq(0))['new_val']['id'].limit(3)
      rb: even_inserts = tbl.changes().filter{ |row| (row['new_val']['id'] % 2).eq(0)}['new_val']['id'].limit(3)
      js: even_inserts = tbl.changes().filter(r.row('new_' + 'val')('id').mod(2).eq(0))('new_' + 'val')('id').limit(3)      
    
    # Fill in some data
    - cd: tbl.insert([{'id':1}, {'id':2}, {'id':3}, {'id':4}, {'id':5}, {'id':6}])
      ot: ({'skipped':0, 'deleted':0, 'unchanged':0, 'errors':0, 'replaced':0, 'inserted':6})

    # Test that point changefeeds support return-initial
    - cd: tbl.get(0).changes().limit(1)['new_val']
      js: tbl.get(0).changes().limit(1)("new"+"_"+"val")
      ot: ([null])
    - cd: tbl.get(1).changes().limit(1)['new_val']
      js: tbl.get(1).changes().limit(1)("new"+"_"+"val")
      ot: [{'id':1}]

    # Start changefeed watchers
    - rb: point_changes = tbl.get(7).changes(squash:false).limit(3)
    - py: all_changes = tbl.changes(squash=False).limit(4)
      rb: all_changes = tbl.changes(squash:false).limit(4)
      js: all_changes = tbl.changes({squash:false}).limit(4)
    - py: even_changes = tbl.changes(squash=False).filter((r.row['new_val']['id'] % 2).eq(0)).limit(2)
      rb: even_changes = tbl.changes(squash:false).filter{ |row| (row['new_val']['id'] % 2).eq(0)}.limit(2)
      js: even_changes = tbl.changes({squash:false}).filter(r.row('new' + '_' + 'val')('id').mod(2).eq(0)).limit(2)
    
    # Check the insert changefeeds
    - cd: even_inserts
      ot: bag([2, 4, 6])
    
    # Start a second round of changefeed watchers
    - py: even_changes = tbl.changes().filter((r.row['new_val']['id'] % 2).eq(0))['new_val']['id'].limit(2)
      rb: even_changes = tbl.changes().filter{ |row| (row['new_val']['id'] % 2).eq(0)}['new_val']['id'].limit(2)
      js: even_changes = tbl.changes().filter(r.row('new_' + 'val')('id').mod(2).eq(0))('new_' + 'val')('id').limit(2)

    # Insert more than the watchers are waiting for
    - cd: tbl.insert([{'id':7}, {'id':8}, {'id':9}, {'id':10}])
      ot: ({'skipped':0, 'deleted':0, 'unchanged':0, 'errors':0, 'replaced':0, 'inserted':4})

    # Check that our limited watchers have been satified
    
    - cd: even_changes
      ot: bag([8, 10])
    
    # Full format insert
    - cd: format_insert = tbl.changes().limit(1)
    - cd: tbl.insert([{'id':11}])
    - cd:
        py: list(format_insert)
        rb: Array(format_insert)
        js: format_insert
      ot: [{'old_val': null, 'new_val': {'id': 11}}]
    
    # Full format update
    - cd: format_update = tbl.changes().limit(1)
    - cd: tbl.get(11).update({'update':'a'})
      ot: ({'skipped':0, 'deleted':0, 'unchanged':0, 'errors':0, 'replaced':1, 'inserted':0})
    - cd:
        py: list(format_update)
        rb: Array(format_update)
        js: format_update    
      ot: "[{'old_val': {'id': 11}, 'new_val': {'id': 11, 'update':'a'}}]"

    # Check that our point watcher works correctly
    - rb: tbl.get(7).update({a:1})['replaced']
      ot: 1
    - rb: point_changes.to_a
      ot: ([{"new_val"=>null},
            {"new_val"=>{"id"=>7}, "old_val"=>null},
            {"new_val"=>{"a"=>1, "id"=>7}, "old_val"=>{"id"=>7}}])
