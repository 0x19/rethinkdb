desc: Tests meta queries for creating and deleting tables
tests:

    - def: db = r.db('test')

    - cd: db.table_list()
      ot: []

    # Table create
    - cd: db.table_create('a')
      ot: ({'created':1})

    - cd: db.table_list()
      ot: ['a']

    - cd: db.table_create('b')
      ot: ({'created':1})

    - cd: db.table_list()
      ot: bag(['a', 'b'])

    # Table drop
    - cd: db.table_drop('a')
      ot: ({'dropped':1})

    - cd: db.table_list()
      ot: ['b']

    - cd: db.table_drop('b')
      ot: ({'dropped':1})

    - cd: db.table_list()
      ot: []

    # Table create options
    - py: db.table_create('ab', primary_key='bar', durability='soft')
      js: db.tableCreate('ab', {primary_key:'bar', durability:'soft'})
      rb: db.table_create('ab', {:primary_key => 'bar', :durability => 'soft'})
      ot: ({'created':1})

    - cd: db.table_drop('ab')
      ot: ({'dropped':1})

    - py: db.table_create('ab', primary_key='bar', durability='hard')
      js: db.tableCreate('ab', {primary_key:'bar', durability:'hard'})
      rb: db.table_create('ab', {:primary_key => 'bar', :durability => 'hard'})
      ot: ({'created':1})

    - cd: db.table_drop('ab')
      ot: ({'dropped':1})

    - py: db.table_create('ab', primary_key='bar', durability='wrong')
      js: db.tableCreate('ab', {primary_key:'bar', durability:'wrong'})
      rb: db.table_create('ab', {:primary_key => 'bar', :durability => 'wrong'})
      ot: err('RqlRuntimeError', 'Durability option `wrong` unrecognized (options are "hard" and "soft").', [0])

    # Table reconfigure
    - cd: db.table_create('a')
      ot: ({'created':1})

    - cd: db.table('a').reconfigure(1, 1)

    - cd: db.table('a').reconfigure(1, {"default": 1})

    - py: db.table('a').reconfigure(1, 1, director_tag='default')
      js: db.table('a').reconfigure(1, 1, {director_tag:'default'})
      rb: db.table('a').reconfigure(1, 1, {:director_tag => 'default'})

    - cd: db.table('a').reconfigure(1, 1, dry_run=True)

    # Table errors
    - cd: db.table_create('foo')
      ot: ({'created':1})

    - cd: db.table_create('foo')
      ot: err('RqlRuntimeError', 'Table `test.foo` already exists.', [0])

    - cd: db.table_drop('foo')
      ot: ({'dropped':1})

    - cd: db.table_drop('foo')
      ot: err('RqlRuntimeError', 'Table `test.foo` does not exist.', [0])

    - cd: db.table_create('nonsense', 'foo')
      ot:
        js: err('RqlDriverError', 'Expected 1 argument (not including options) but found 2.', [])
        rb: err("RqlCompileError", "Expected between 1 and 2 arguments but found 3.", [])
        py: err("RqlCompileError", "Expected between 1 and 2 arguments but found 3.", [])

    - js: db.table_create('nonsense', {'foo':'bar'})
      py: db.table_create('nonsense', foo='bar')
      rb: db.table_create('nonsense', :foo => 'bar')
      ot: err('RqlCompileError', "Unrecognized optional argument `foo`.", [])

    - js: db.table_create('nonsense1', {'datacenter':'bar'})
      py: db.table_create('nonsense1', datacenter='bar')
      rb: db.table_create('nonsense1', :datacenter => 'bar')
      ot: err('RqlRuntimeError', 'Datacenter `bar` does not exist.', [0])

    - cd: db.table('a').reconfigure(0, 1)
      ot: err('RqlRuntimeError', 'Every table must have at least one shard.')

    - cd: db.table('a').reconfigure(1000, 1)
      ot: err('RqlRuntimeError', 'Maximum number of shards is 32.')

    - cd: db.table('a').reconfigure(1, {"default": 0})
      ot: >
          err('RqlRuntimeError', 'Can't use server tag `default` for directors because '
          'you specified no replicas in server tag `default`.")

    - cd: db.table('a').reconfigure(1, {"default": -3})
      ot: err('RqlRuntimeError', 'Can\'t have a negative number of replicas")

    - cd: db.table('a').reconfigure(2, 1)
      ot: >
          err('RqlRuntimeError', 'You requested 2 shards, but there are only 1 servers '
          'with the tag `default`. reconfigure() requires at least as many servers with '
          'each tag as there are shards, so that it can distribute the shards across '
          'servers instead of utting multiple shards on a single server. You can work '
          'around this limitation by generating a configuration manually instead of '
          'using reconfigure().')

    - cd: db.table('a').reconfigure(1, 2)
      ot: >
          err('RqlRuntimeError', 'You requested 2 replicas on servers with the tag '
          '`default`, but there are only 1 servers with the tag `default`. It\'s '
          'impossible to have more replicas of the data than there are servers.')

