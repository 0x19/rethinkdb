desc: Tests replacement of selections
tests:

    # Set up some data
    - cd: r.table_create('asg')
      ot: ({'created':1})

    - cd: r.table('asg').insert({'id':0}, :return_changes => true).pluck('changes', 'first_error')
      py: r.table('asg').insert({'id':0}, return_changes=True).pluck('changes', 'first_error')
      js: r.table('asg').insert({'id':0}, {'return_changes':true}).pluck('changes', 'first_error')
      ot: ({'changes':[{'old_val':null,'new_val':{'id':0}}]})
    - cd: r.table('asg').insert({'id':0}, :return_changes => true).pluck('changes', 'first_error')
      py: r.table('asg').insert({'id':0}, return_changes=True).pluck('changes', 'first_error')
      js: r.table('asg').insert({'id':0}, {'return_changes':true}).pluck('changes', 'first_error')
      # We still return the old value if there's an error.
      ot: ({'first_error':"Duplicate primary key `id`:\n{\n\t\"id\":\t0\n}\n{\n\t\"id\":\t0\n}",'changes':[{'old_val':{'id':0},'new_val':{'id':0}}]})
    - cd: r.table('asg').insert([{'id':1}], :return_changes => true)
      py: r.table('asg').insert([{'id':1}], return_changes=True)
      js: r.table('asg').insert([{'id':1}], {'return_changes':true})
      ot: ({'changes':[{'new_val':{'id':1},'old_val':null}], 'errors':0, 'deleted':0, 'unchanged':0, 'skipped':0, 'replaced':0, 'inserted':1})
    - cd: r.table('asg').insert([{'id':0}], :return_changes => true).pluck('changes', 'first_error')
      py: r.table('asg').insert([{'id':0}], return_changes=True).pluck('changes', 'first_error')
      js: r.table('asg').insert([{'id':0}], {'return_changes':true}).pluck('changes', 'first_error')
      ot: ({'first_error':"Duplicate primary key `id`:\n{\n\t\"id\":\t0\n}\n{\n\t\"id\":\t0\n}", 'changes':[{'new_val':{'id':0},'old_val':{'id':0}}]})

    - cd: r.table('asg').get(0).update({'x':1}, :return_changes => true).pluck('changes', 'first_error')
      py: r.table('asg').get(0).update({'x':1}, return_changes=True).pluck('changes', 'first_error')
      js: r.table('asg').get(0).update({'x':1}, {'return_changes':true}).pluck('changes', 'first_error')
      ot: ({'changes':[{'old_val':{'id':0},'new_val':{'id':0,'x':1}}]})
      # We still return the old value if there's an error.
    - cd: r.table('asg').get(0).update({'x':r.error("a")}, :return_changes => true).pluck('changes', 'first_error')
      py: r.table('asg').get(0).update({'x':r.error("a")}, return_changes=True).pluck('changes', 'first_error')
      js: r.table('asg').get(0).update({'x':r.error("a")}, {'return_changes':true}).pluck('changes', 'first_error')
      ot: ({'first_error':'a','changes':[{'old_val':{'id':0,'x':1},'new_val':{'id':0,'x':1}}]})
    - cd: r.table('asg').update({'x':3}, :return_changes => true).pluck('changes', 'first_error')
      py: r.table('asg').update({'x':3}, return_changes=True).pluck('changes', 'first_error').do(lambda d:d.merge({'changes':d['changes'].order_by(lambda a:a['old_val']['id'])}))
      js: r.table('asg').update({'x':3}, {'return_changes':true}).pluck('changes', 'first_error').do(function(p){return p.merge({'changes':p('changes').order_by(function(a){return a('old_val')('id')})})})
      ot: ({'changes':[{'old_val':{'id':0, 'x':1},'new_val':{'id':0, 'x':3}}, {'old_val':{'id':1},'new_val':{'id':1, 'x':3}}]})

    - cd: r.table('asg').get(0).replace({'id':0,'x':2}, :return_changes => true).pluck('changes', 'first_error')
      py: r.table('asg').get(0).replace({'id':0,'x':2}, return_changes=True).pluck('changes', 'first_error')
      js: r.table('asg').get(0).replace({'id':0,'x':2}, {'return_changes':true}).pluck('changes', 'first_error')
      ot: ({'changes':[{'old_val':{'id':0,'x':3},'new_val':{'id':0,'x':2}}]})
      # We still return the old value if there's an error.
    - cd: r.table('asg').get(0).replace(:return_changes => true){{'x':r.error('a')}}.pluck('changes', 'first_error')
      py: r.table('asg').get(0).replace(lambda y:{'x':r.error('a')}, return_changes=True).pluck('changes', 'first_error')
      js: r.table('asg').get(0).replace(function(y){return {'x':r.error('a')}}, {'return_changes':true}).pluck('changes', 'first_error')
      ot: ({'first_error':'a','changes':[{'old_val':{'id':0,'x':2},'new_val':{'id':0,'x':2}}]})
    - rb: r.table('asg').replace( :return_changes => true) { |d| d.without('x')}.pluck('changes', 'first_error').do {|d| d.merge({:changes => d['changes'].order_by {|a| a['old_val']['id']}})}
      py: r.table('asg').replace(lambda y:y.without('x'), return_changes=True).pluck('changes', 'first_error').do(lambda d:d.merge({'changes':d['changes'].order_by(lambda a:a['old_val']['id'])}))
      js: r.table('asg').replace(function(p){return p.without('x')}, {'return_changes':true}).pluck('changes', 'first_error').do(function(p){return p.merge({'changes':p('changes').order_by(function(a){return a('old_val')('id')})})})
      ot: ({'changes':[{'new_val':{'id':0},'old_val':{'id':0, 'x':2}}, {'new_val':{'id':1},'old_val':{'id':1,'x':3}}]})
    - rb: r.table('asg').replace({'x':1}, :return_changes => true).pluck('changes', 'first_error').do {|d| d.merge({:changes => d['changes'].order_by {|a| a['old_val']['id']}})}
      py: r.table('asg').replace({'x':1}, return_changes=True).pluck('changes', 'first_error').do(lambda d:d.merge({'changes':d['changes'].order_by(lambda a:a['old_val']['id'])}))
      js: r.table('asg').replace({'x':1}, {'return_changes':true}).pluck('changes', 'first_error').do(function(p){return p.merge({'changes':p('changes').order_by(function(a){return a('old_val')('id')})})})
      ot: ({'first_error':"Inserted object must have primary key `id`:\n{\n\t\"x\":\t1\n}", 'changes':[{'new_val':{'x':1},'old_val':{'id':0}}, {'new_val':{'x':1},'old_val':{'id':1}}]})

    - rb: r.table('asg').foreach{|row| [r.table('asg').get(0).update(nil, :return_changes => true), r.table('asg').get(0).update(nil, :return_changes => true)]}.pluck('changes', 'first_error').do {|d| d.merge({:changes => d['changes'].order_by {|a| a['old_val']['id']}})}
      ot: ({'changes':[{'new_val':{'id':0}, 'old_val':{'id':0}},{'new_val':{'id':0}, 'old_val':{'id':0}},{'new_val':{'id':0}, 'old_val':{'id':0}},{'new_val':{'id':0}, 'old_val':{'id':0}}]})

    - cd: r.table('asg').get(0).delete(:return_changes => true).pluck('changes', 'first_error')
      py: r.table('asg').get(0).delete(return_changes=True).pluck('changes', 'first_error')
      js: r.table('asg').get(0).delete({'return_changes':true}).pluck('changes', 'first_error')
      ot: ({'changes':[{'old_val':{'id':0},'new_val':null}]})
    - cd: r.table('asg').delete(:return_changes => true)
      py: r.table('asg').delete(return_changes=True)
      js: r.table('asg').delete({'return_changes':true})
      ot: ({'deleted':1,'errors':0,'inserted':0,'replaced':0,'skipped':0,'unchanged':0,'changes':[{'new_val':null, 'old_val':{'id':1}}]})

    - cd: r.table_drop('asg')
      ot: ({'dropped':1})
