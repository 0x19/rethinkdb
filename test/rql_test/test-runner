#!/usr/bin/env python

'''Tool to assemble and run the RQL language tests, including the polyglot yaml tests'''

from __future__ import print_function

import atexit, collections, copy, distutils.version, distutils.spawn, optparse, os
import re, shutil, signal, stat, string, subprocess, sys, tempfile, threading, time, traceback, warnings

try:
    import yaml
except ImportError:
    sys.exit('%s requires that PyYAML be installed' % os.path.basename(__file__))

sys.path.insert(0, os.path.join(os.path.dirname(os.path.realpath(__file__)), os.pardir, "common"))
import driver, test_exceptions, utils

try:
    unicode
except NameError:
    unicode = str
try:
    import Queue
except ImportError:
    import queue as Queue

# -- settings

testGroupSeperator = '/'
testExtensions = ['test', 'yaml']

r = utils.import_python_driver()

# -- set the default tempfolder to a generated folder in this directory

tempfile.tempdir = tempfile.mkdtemp(prefix='.rethinkdbTestTemp-', dir=os.getcwd())
utils.cleanupPathAtExit(tempfile.tempdir)

# -- signal and atexit handlers

runningProcessGroupsIds = []
def cleanupProcessGroups():
    '''fired by atexit or a signal handler, this should make sure we don't leave processes running'''
    
    for processGroupId in runningProcessGroupsIds:
        try:
            utils.kill_process_group(processGroupId)
        except Exception as e:
            raise Warning('Unable to shut down server: %s' % str(e))
atexit.register(cleanupProcessGroups)

cancelRun = False
def setCancelRun(*args):
    global cancelRun
    cancelRun = True
signal.signal(signal.SIGINT, setCancelRun)
# ToDo: cover all relevent signals
# ToDo: allow for double-sigint to fast-kill

# --

# A test script src language
# This class attempts to abstract some of the details that
# separate our source languages.
class SrcLang(object):
    test_types = None
    display_name = None

    interpreter_name_exe_names = None
    _interpreter_path = None
    interpreter_version = None
    interpreter_env_name = None
    
    driver_source_path = None
    driver_build_env_name = None
    driver_build_path = None
    
    instance_setup = False
    
    # -- class variables
    
    _singletons = {}
    
    def __new__(cls, version=''):
        singletonName = cls.__name__
        if version not in (None, ''):
            singletonName = "%s-%s" % (cls.__name__, str(version))
        if singletonName not in cls._singletons:
            cls._singletons[singletonName] = super(SrcLang, cls).__new__(cls)
        return cls._singletons[singletonName]
    
    def __init__(self):
        self.instance_setup = True
    
    # Returns the approriate line comment string
    def comment(self):
        return "#"

    # Converts input value into the appropriate string
    # representation for this language.
    def langrepr(self, val):
        return repr(str(val))

    # Translates names from canonical name representation
    # (underscores) to the convention for this language
    def nametranslate(self, name):
        return name

    # Translates dictionary (object) representation from cannonical
    # form (e.g. "{'a':1}") to the appropriate representation for this
    # language
    def dicttranslate(self, dic):
        return dic

    # Translates 'null' to langauge equivalents
    def nulltranslate(self, strng):
        return strng

    # Translate a generic code string using the rules defined by `self`
    def translate_query(self, src, encode=True):
        encoded = src
        if encode is True:
             encoded = self.langrepr(src)
        return self.dicttranslate(self.nametranslate(self.nulltranslate(encoded)))

    # Translate an expected value
    def translate_expected(self, src):
        return self.dicttranslate(self.nulltranslate(self.langrepr(src)))
    
    @property
    def interpreter_path(self):
        '''return the path to the interpreter on this system, respecting the given env variable'''
        
        if self._interpreter_path is not None:
            return self._interpreter_path 
        
        if self.interpreter_name_exe_names is None or self.interpreter_name_exe_names == []:
            raise NotImplementedError('interpreter_name_exe_names is not implemented as required for the SrcLang subclass: %s' % self.__class__.__name__)
        if self.interpreter_env_name is None:
            raise NotImplementedError('interpreter_env_name is not implemented as required for the SrcLang subclass: %s' % self.__class__.__name__)
        
        executablePath = os.getenv(self.interpreter_env_name)
        if executablePath is None:
            for name in self.interpreter_name_exe_names:
                candidatePath = distutils.spawn.find_executable(name)
                if candidatePath is not None:
                    try:
                        self.interpreter_version = self.version_check(candidatePath)
                        executablePath = candidatePath
                        break
                    except Exception:
                        pass
        else:
            self.interpreter_version = self.version_check(executablePath) # execption on failure
            
        if executablePath is None:
            raise test_exceptions.TestingFrameworkException(detail='Unable to find interperter %s' % self.display_name)
        
        if not os.access(executablePath, os.X_OK):
            raise test_exceptions.TestingFrameworkException(detail='The interperter %s is not executable' % executablePath)
        
        self._interpreter_path = executablePath
        return self._interpreter_path
    
    def get_interpreter_version(self, executablePath):
        '''Return the version string for this interpreter, this must be implimented by subclasses'''
        raise NotImplementedError('version_check is not implemented as required for the SrcLang subclass: %s' % self.__class__.__name__)
    
    def version_check(self, executablePath):
        '''Check that this is a supported version of this interpreter'''
        
        targetVersion = self.get_interpreter_version(executablePath)
        
        if self.minVersion is not None and targetVersion < self.minVersion:
            raise test_exceptions.TestingFrameworkException(detail='Version of %s (%s) was below the minuimum version %s' % (executablePath, targetVersion, self.minVersion))
        
        if self.maxVersion is not None and targetVersion > self.maxVersion:
            raise test_exceptions.TestingFrameworkException(detail='Version of %s (%s) was above the maximum version %s for python2' % (executablePath, targetVersion, self.maxVersion))
        
        return targetVersion

class PyLang(SrcLang):
    test_types = None
    display_name = 'python'
    
    interpreter_name_exe_names = None
    interpreter_env_name = None
    minVersion = None
    maxVersion = None
    
    driver_source_path = os.getenv('PYTHON_DRIVER_SRC_DIR') or os.path.join(utils.project_root_dir, 'drivers', 'python')
    driver_build_env_name = 'PYTHON_DRIVER_DIR'
    driver_build_path = os.getenv('PYTHON_DRIVER_DIR') or os.path.join(utils.project_root_dir, 'build', 'drivers', 'python')
    
    polyglot_language_header = os.path.join(os.path.dirname(__file__), 'drivers', 'driver.py')
    
    def __init__(self, version, interpreter_env_name='PYTHON'):
        if self.instance_setup is True:
            return
        
        super(PyLang, self).__init__()
        
        self.display_name = 'python ' + version
        self.test_types = []
        self.interpreter_name_exe_names = []
        
        if interpreter_env_name is not None:
            self.interpreter_env_name = interpreter_env_name
        
        self.minVersion = distutils.version.LooseVersion(version)
        self.maxVersion = distutils.version.LooseVersion(version + '.999')
        
        if version != '':
            lastVersion = None
            workingVersion = version
            while lastVersion != workingVersion:
                self.test_types.append('py' + workingVersion)
                self.interpreter_name_exe_names.append('python' + workingVersion)
                
                lastVersion = workingVersion
                workingVersion = os.path.splitext(workingVersion)[0]
        self.test_types.append('py')
        self.interpreter_name_exe_names.append('python')
    
    def langrepr(self, val):
        encoded = None
        if not isinstance(val, unicode):
            encoded = repr(str(val))
        else:
            encoded = repr(unicode(val))
        if distutils.version.LooseVersion('3.0') <= self.interpreter_version and self.interpreter_version < distutils.version.LooseVersion('3.3'):
            if len(encoded) > 2 and encoded[:2] in ('u"', "u'"):
                encoded = encoded[1:]
        return encoded
    
    def nulltranslate(self, strng):
        return re.sub("(?<!\"|')null(?!\"|')", 'None', strng)
    
    def get_interpreter_version(self, executablePath):
        versionCheckProcess = subprocess.Popen([executablePath, '--version'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        output, __ = versionCheckProcess.communicate()
        
        if versionCheckProcess.returncode != 0:
            raise test_exceptions.TestingFrameworkException(detail='Unable to determine the version of %s' % executablePath)
        
        versionNumbers = re.findall(r'\b([\d\.]+)\b', str(output.decode('utf-8')))
        if len(versionNumbers) != 1:
            raise test_exceptions.TestingFrameworkException(detail='Got multiple possible version numbers for %s' % executablePath)
        
        return distutils.version.LooseVersion(str(versionNumbers[0]))

class JsLang(SrcLang):
    test_types = ['js']
    display_name = 'javascript'
    
    interpreter_name_exe_names = ['node']
    interpreter_env_name = 'NODE'
    minVersion = None # no version requirements yet
    maxVersion = None
    
    driver_source_path = os.getenv('JAVASCRIPT_DRIVER_SRC_DIR') or os.path.join(utils.project_root_dir, 'drivers', 'javascript')
    driver_build_env_name = 'JAVASCRIPT_DRIVER_DIR'
    driver_build_path = os.getenv('JAVASCRIPT_DRIVER_DIR') or os.path.join(utils.project_root_dir, 'build', 'packages', 'js')
    
    polyglot_language_header = os.path.join(os.path.dirname(__file__), 'drivers', 'driver.js')
    
    def comment(self):
        return "//"

    def langrepr(self, val):
        if isinstance(val, str):
            return repr(val)
        elif isinstance(val, unicode):
            return repr(val)[1:] # Get rid of the 'u'
        elif isinstance(val, bool):
            return ("true" if val else "false")
        else:
            return repr(str(val))

    # Converts cannonical form (underscore separation) to camel case
    def nametranslate(self, name):
        if not re.search('__', name):
            return re.sub('_[a-z]', lambda m: m.group()[1].upper(), name)
        else:
            return re.sub('__', '_', name)
    
    def get_interpreter_version(self, executablePath):
        versionCheckProcess = subprocess.Popen([executablePath, '--version'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        output, __ = versionCheckProcess.communicate()
        
        if versionCheckProcess.returncode != 0:
            raise test_exceptions.TestingFrameworkException(detail='Unable to determine the version of %s' % executablePath)
        
        versionNumber = str(output.decode('utf-8')).lstrip('v').strip()
        return distutils.version.LooseVersion(versionNumber)

class RbLang(SrcLang):
    test_types = None
    display_name = 'ruby'
    
    interpreter_name_exe_names = None
    interpreter_env_name = None
    minVersion = None
    maxVersion = None
    
    driver_source_path = os.getenv('RUBY_DRIVER_SRC_DIR') or os.path.join(utils.project_root_dir, 'drivers', 'ruby')
    driver_build_env_name = 'RUBY_DRIVER_DIR'
    driver_build_path = os.getenv('RUBY_DRIVER_DIR') or os.path.join(utils.project_root_dir, 'drivers', 'ruby', 'lib')
    
    polyglot_language_header = os.path.join(os.path.dirname(__file__), 'drivers', 'driver.rb')
    
    def __init__(self, version, interpreter_env_name='RUBY'):
        if self.instance_setup is True:
            return
        
        super(RbLang, self).__init__()
        
        self.display_name = 'ruby ' + version
        self.test_types = []
        self.interpreter_name_exe_names = []
        
        if interpreter_env_name is not None:
            self.interpreter_env_name = interpreter_env_name
        
        self.minVersion = distutils.version.LooseVersion(version)
        self.maxVersion = distutils.version.LooseVersion(version + '.999')
        
        if version != '':
            lastVersion = None
            workingVersion = version
            while lastVersion != workingVersion:
                self.test_types.append('rb' + workingVersion)
                self.interpreter_name_exe_names.append('ruby' + workingVersion)
                
                lastVersion = workingVersion
                workingVersion = os.path.splitext(workingVersion)[0]
        self.test_types.append('rb')
        self.interpreter_name_exe_names.append('ruby')
    
    def rb_str_repr(self, string):
        return ('"' + re.sub("\"", "\\\"", re.sub("\\\\", "\\\\\\\\", string)) + '"')

    def langrepr(self, val):
        if isinstance(val, str):
            return self.rb_str_repr(val)
        elif isinstance(val, unicode):
            return re.sub("\\$", "\\$", repr(val)[1:]) # Get rid of the 'u'
        elif isinstance(val, bool):
            return ("true" if val else "false")
        else:
            return repr(str(val))

    def dicttranslate(self, dic):
        dicnew = re.sub("\\\\?'([^']*[^'\\\\])\\\\?':", ":\'\\1\'=>", dic)
        dicnew = re.sub("\\\\n$", "\n", dicnew)
        return dicnew

    def nulltranslate(self, strng):
        return re.sub('null', 'nil', strng)
    
    def get_interpreter_version(self, executablePath):
        '''Return the version string for this interpreter'''
        versionCheckProcess = subprocess.Popen([executablePath, '--version'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        output, __ = versionCheckProcess.communicate()
        
        if versionCheckProcess.returncode != 0:
            raise test_exceptions.TestingFrameworkException(detail='Unable to determine the version of %s' % executablePath)
        
        versionNumber = str(output.decode('utf-8').split()[1]).strip()
        return distutils.version.LooseVersion(versionNumber)

interpreters = {
    'js': [JsLang()],
    'py': [PyLang('2.6'), PyLang('2.7'), PyLang('3.0'), PyLang('3.1'), PyLang('3.2'), PyLang('3.3'), PyLang('3.4')],
    'rb': [RbLang('1.9'), RbLang('2.0'), RbLang('2.1')],
    
    'py2': [PyLang('2.6'), PyLang('2.7')],
    'py2.6': [PyLang('2.6')],
    'py2.7': [PyLang('2.7')],
    
    'py3': [PyLang('3.0'), PyLang('3.1'), PyLang('3.2'), PyLang('3.3'), PyLang('3.4')],
    'py3.0': [PyLang('3.0')],
    'py3.1': [PyLang('3.1')],
    'py3.2': [PyLang('3.2')],
    'py3.3': [PyLang('3.3')],
    'py3.4': [PyLang('3.4')],
    
    'rb1.9': [RbLang('1.9')],
    'rb1': [RbLang('1.9')],
    
    'rb2': [RbLang('2.0'), RbLang('2.1')],
    'rb2.0': [RbLang('2.0')],
    'rb2.1': [RbLang('2.1')]
}

# Abstracts a set of tests given in a single file
class TestGroup(object):
    
    testLanguageEntry = collections.namedtuple('testLanguageEntry', ['command', 'expected', 'definition', 'runopts', 'testopts'])
    variableRegex = re.compile('^\s*(?P<quoteString>[\'\"]*)\s*(?P<variableName>[a-zA-Z][\w\[\]\{\}\'\"]*)\s*=\s*(?P<expression>[^=].+)$')
    
    @classmethod
    def buildYamlTest(cls, testName, sourceFile, language, outputPath, shards=1, useSpecificTable=False):
    
        # -- input validation
        
        # testName
        
        if testName is None:
            raise ValueError('buildYamlTest requires a testName, got None')
        testName = str(testName)
        
        # sourceFile
        
        if sourceFile is None:
            raise ValueError('buildYamlTest requires a sourceFile, got None')
        if not os.path.isfile(sourceFile):
            raise ValueError('buildYamlTest requires a sourceFile, got: %s' % str(sourceFile))
        
        # language
        
        if language is None:
            raise ValueError('buildYamlTest requires a language, got None')
        if not isinstance(language, SrcLang):
            raise ValueError('buildYamlTest requires a subclass of SrcLang, got %s' % language)
        
        # outputPath
        
        if outputPath is None:
            raise ValueError('buildYamlTest requires an outputPath, got None')
        if not os.path.isdir(os.path.dirname(outputPath)):
            if not os.path.exists(os.path.dirname(outputPath)):
                os.makedirs(os.path.dirname(outputPath))
            else:
                raise ValueError('buildYamlTest got an outputPath with a directory that was already a non-file: %s' % outputPath)
        if os.path.exists(outputPath) and not os.path.isfile(outputPath):
            raise ValueError('buildYamlTest got an outputPath that was already a non-file: %s' % outputPath)
        
        # -- create the file
        
        parsed_data = None
        try:
            parsed_data = yaml.load(open(sourceFile))
        except Exception as e:
            raise ValueError('buildYamlTest got a sourceFile (%s) that was unable to be parsed as Yaml: %s' % (sourceFile, str(e)))
        
        with open(outputPath, 'w') as outputFile:
            
            # - write the shebang line
            
            outputFile.write('#!%s\n' % language.interpreter_path)
            
            # - write in the encoding (mostly for Python2.6)
            
            outputFile.write('%s -*- coding: utf-8 -*-\n\n' % language.comment())
            
            # - mark start of the header/driver
            
            outputFile.write('%s ========== Start of common test functions ==========\n\n' % language.comment())
            
            # - insert a marker telling what test this is
            
            outputFile.write('%s Tests %s (%s): %s (%s)\n\n' % (language.comment(), testName, language.display_name, parsed_data['desc'], sourceFile))
            
            # - add the header/driver
            
            with open(language.polyglot_language_header) as headerFile:
                for chunk in iter((lambda: headerFile.read(1024)), ''):
                    outputFile.write(chunk)
            
            outputFile.write('\n\n')
            
            # - mark end of the header/driver
            
            outputFile.write('%s ========== End of common test functions ==========\n\n' % language.comment())
            
            # - set up table if necessary
            
            if "table_variable_name" in parsed_data:
                table_name = testName.replace(".","_").replace("/","_")
                table_name += "_"
                table_name += language.display_name.replace(" ","_").replace(".","_")
                outputFile.write("setup_table(%s, %s)\n\n" % (
                    language.langrepr(parsed_data["table_variable_name"]),
                    language.langrepr(table_name)))
            else:
                outputFile.write("check_no_table_specified()\n\n")
            
            # - add the body of the tests
            
            for testNumber, test in enumerate(parsed_data['tests'], start=0):
                cls.write_test(testName, outputFile, test, language, str(testNumber), shards=shards)
            
            outputFile.write('\n\n')
            
            # - add the footer
            
            outputFile.write('the_end()\n')
            
        # - make sure the file is executable
        
        os.chmod(outputPath, stat.S_IRWXU | stat.S_IRWXG | stat.S_IROTH | stat.S_IXOTH)
    
    @classmethod
    def write_test(cls, testName, out, test, lang, index, shards=1):
        
        testName = os.path.join(testName, str(index))

        # See if this test defines operations for our language
        try:
            testCode = cls.get_lang_entries(test, lang)
        except Exception as e:
            raise Exception("Error while processing test: %s\n%s" % (testName, str(e)))
        
        # Does this test define a variable?
        if testCode.definition:
            cls.write_def(out, testCode.definition)
        
        # Write the commands
        if testCode.command:
            for test_case in testCode.command:
                
                variableMatch = cls.variableRegex.match(test_case)
                if variableMatch:
                    testCode.testopts['variable'] = variableMatch.group('variableName')
                    test_case = variableMatch.group('quoteString') + variableMatch.group('expression')
                
                try:
                    out.write("test(%(code)s, %(expected)s, '%(name)s', %(driveropts)s, %(testopts)s)\n" % {
                        'code': test_case,
                        'expected': testCode.expected or '""',
                        'name': testName,
                        'driveropts': lang.translate_query(repr(testCode.runopts), encode=False),
                        'testopts': lang.translate_query(repr(testCode.testopts), encode=False)
                    })
                    
                    # We want to auto-shard tables that we create. There is stil no
                    # way to do this from rql so we have to hack the admin cli.
                    
                    if shards > 1:
                        pattern = 'table_create\\(\'(\\w+)\'\\)'
                        mo = re.search(pattern, test_case)
                        if mo:
                            table_name = mo.group(1)
                            out.write('shard("%s")\n' % table_name)
                except Exception as e:
                    raise Exception("Error while processing test: %s\n%s\n%s" % (testName, str(testCode.command), str(e)))

    @staticmethod
    def write_def(out, defs):
        for definition in defs:
            out.write('define(%s)\n' % definition)
    
    # Tests may specify generic test strings valid for all languages or language specific versions
    @classmethod
    def get_lang_entries(cls, source, lang, default='command'):
        assert default in ('command', 'expected', 'definition'), 'get_lang_entries requires that default be one of : command, expected, or definition'
        
        results = { 'command': None, 'definition': None, 'expected': None, 'runopts': {}, 'testopts':{} }
        
        if source is None:
            pass
        
        elif default in ('runopts', 'testopts'):
            results[default] = source
        
        elif not hasattr(source, 'get'):
            # leaf, replace appropriate item
            langcode = (lang.test_types[0] if isinstance(lang.test_types, list) else lang.test_types).replace('.', '')
            
            if default != 'expected' and hasattr(source, '__iter__') and not hasattr(source, 'capitalize'):
                results[default] = []
                for item in source:
                    results[default].append(string.Template(lang.translate_query(item)).safe_substitute({'langcode': langcode}))
            else:
                if default == 'expected':
                    results['expected'] = string.Template(lang.translate_expected(source)).safe_substitute({'langcode': langcode})
                else:
                    results[default] = [string.Template(lang.translate_query(source)).safe_substitute({'langcode': langcode})]
        else:
            if default == 'command':
                
                # runopts and testopts
                if 'runopts' in source:
                    results['runopts'].update(source['runopts'])
                if 'testopts' in source:
                    results['testopts'].update(source['testopts'])
                
                # command
                
                for langCode in lang.test_types + ['cd']:
                    if langCode in source:
                        results = cls.combineLangEntries(results, cls.get_lang_entries(source[langCode], lang, 'command'))
                        break
                
                # def and ot
                if 'def' in source:
                    results = cls.combineLangEntries(results, cls.get_lang_entries(source['def'], lang, 'definition'))
                if 'ot' in source:
                    results = cls.combineLangEntries(results, cls.get_lang_entries(source['ot'], lang, 'expected'))
                    
            elif default == 'expected':
                for langCode in lang.test_types + ['cd']:
                    if langCode in source:
                        results['expected'] = cls.get_lang_entries(source[langCode], lang, 'expected').expected
                        break
            
            elif default == 'definition':
                for langCode in lang.test_types + ['cd']:
                    if langCode in source:
                        results['definition'] = cls.get_lang_entries(source[langCode], lang, 'definition').definition
                        break
            
            else:
                sys.stderr.write('Warning! Unknown default type: %s\n' % str(default))
        
        return cls.testLanguageEntry(command=results['command'], expected=results['expected'], definition=results['definition'], runopts=results['runopts'], testopts=results['testopts'])
    
    @classmethod
    def combineLangEntries(cls, left, right):
        
        # - convert both to dicts
        
        if isinstance(left, cls.testLanguageEntry):
            left = dict(left._asdict())
        elif not isinstance(left, dict):
            raise ValueError('combineLangEntries given a left that is not useable: %s' % str(left))
        
        if isinstance(right, cls.testLanguageEntry):
            right = dict(right._asdict())
        elif not isinstance(right, dict):
            raise ValueError('combineLangEntries given a right that is not useable: %s' % str(right))
        
        # combine them, keeping any non-None entries from right
        returnDict = {}
        for key in set(right.keys() + left.keys()): # should be the same, but...
            if key in ('runopts', 'testopts') and any([left.get(key), right.get(key)]):
                returnValue = left.get(key) or {}
                returnValue.update(right.get(key) or {})
                returnDict[key] = returnValue
            else:
                returnDict[key] = right.get(key) or left.get(key)
        return returnDict

class RethinkDBRunningServer(object):
    
    __driver_port = None
    __cluster_port = None
    
    __reqlConnection = None
    
    def __init__(self, driver_port, cluster_port):
        self.__driver_port = driver_port
        self.__cluster_port = cluster_port
    
    @property
    def host(self):
        return 'localhost'
    
    @property
    def driver_port(self):
        return self.__driver_port
    
    @property
    def cluster_port(self):
        return self.__cluster_port
    
    @property
    def executable_path(self):
        return 'NOT_AVALIBLE_FOR_RUNNING_SERVERS'
    
    def check(self):
        if not self.__reqlConnection:
            self.__reqlConnection = r.connect(host=self.host, port=self.driver_port)
        
        # - a simple query to check avalibility
        
        r.db_list().run(self.__reqlConnection)

# ==== Main

def check_language(option, opt_str, value, parser):
    if value not in option.choices:
        raise optparse.OptionValueError('Invalid language: %s' % value) 
    
    if not hasattr(parser.values, option.dest):
        setattr(parser.values, option.dest, [])
    selectedValues = getattr(parser.values, option.dest)
    if selectedValues == None:
        selectedValues = []
    
    foundAny = False
    for language in interpreters[value]:
        try:
            language.interpreter_path # errors if it is not present/found
            foundAny = True
            if language not in selectedValues:
                selectedValues.append(language)
                break # default is to only take one language from a group
        except Exception:
            continue
    
    if foundAny is False:
        raise optparse.OptionValueError('Unable to find a valid interpreter for language: %s' % value)
    
    setattr(parser.values, option.dest, selectedValues)

class Test(object):
    
    # == constants
    
    TIMED_OUT_EXIT_CODE = -257 # outside the range of exit and signal codes
    
    # == class/instance variables
    
    timeout = 300 # seconds to timeout, this can be changed per-test
    
    # == instance variables
    
    name = None
    type = None
    path = None
    driverLang = None
    
    __status = 'queued' # queued, setting up, running, ended
    __result = None # None, failed setup, failed, crashed, crashed server, timed out, canceled, suceeded
    testProcess = None
    
    setupStartTime = None
    setupDurration = None
    testDurration = None
    
    envVariables = None
    
    __console_output = None
    returncode = None
    errorMessage = None # single-line description
    errorDetails = None # multi-line details, e.g.: tracebacks
    
    def __init__(self, name, path, driverLang=None, timeout=None):
        self.name = name
        self.path = path
        self.driverLang = driverLang
        
        if timeout is not None:
            try:
                self.timeout = float(timeout)
            except Exception:
                raise ValueError('timeout must be a numeric value, got: %s' % str(timeout))
    
    @property
    def interpreter_path(self):
        return None
    
    @property
    def command(self):
        if self.path is None:
            raise RuntimeError('%s %s has no path defined when `command` was called' % (self.__class__.__name__, self.name))
        
        command = []
        if self.interpreter_path is not None:
            if not os.access(self.interpreter_path, os.X_OK):
                raise RuntimeError('interpreter is not valid/runnnable: %s' % str(self.interpreter_path))
            command += [self.interpreter_path]
        command += [str(self.path)]
        return command
    
    @property
    def status(self):
        return self.__status
    
    @property
    def result(self):
        if self.__status != 'ended':
            return None
        else:
            return self.__result
        
    @result.setter
    def result(self, value):
        '''Set the result to one of the following: failed, failed setup, crashed server, crashed, timed out, canceled, suceeded'''
        
        if value not in ('failed', 'failed setup', 'crashed server', 'crashed', 'timed out', 'canceled', 'suceeded'):
            raise ValueError('result can not be "%s", rather it must be one of: failed, failed setup, crashed server, crashed, canceled, suceeded' % str(value))
        
        self.__result = value
    
    @property
    def durration(self):
        return (self.setupDurration or 0) + (self.testDurration or 0)
    
    @property
    def console_output(self):
        errorReturn = '' + (self.errorMessage or '') + (self.errorDetails or '')
        
        if self.__console_output is None:
            return errorReturn
        else:
            self.__console_output.seek(0)
            return (errorReturn + "\n" if errorReturn else '') + self.__console_output.read()
    
    def queueTest(self):
        '''Called when the test is put (back) into the queue'''
        
        self.__status = 'queued'
        self.setupStartTime = None
        self.setupDurration = None
        self.testDurration = None
    
    def setupTest(self):
        '''Do any pre-run setup that needs to be done for this test'''
        
        if self.__status != 'queued':
            raise RuntimeError('Something went wrong, we were going from "%s" to "setting up"' % self.__status)
        
        self.__status = 'setting up'
        self.setupStartTime = time.time()
        
        # note: in subclasses where this could fail this should set the status to 'ended' and set the setupDurration correctly
    
    def startTest(self, server=None):
        '''Run the test'''
        
        if self.__status != 'setting up':
            raise RuntimeError('Something went wrong, we were going from "%s" to "running"' % self.__status)
        
        if server is None or not isinstance(server, (driver.Process, RethinkDBRunningServer)):
            raise RuntimeError('startTest requires a server instance, got: %s' % str(server))
        
        self.__status = 'running'
        self.setupDurration = time.time() - self.setupStartTime
        
        # -- collect ENV variables
        
        self.envVariables = copy.copy(os.environ)
        self.envVariables.update({
            'RDB_DRIVER_PORT':str(server.driver_port),
            'RDB_CLUSTER_PORT':str(server.cluster_port),
            'RDB_SERVER_HOST':server.host
        })
        if self.driverLang:
            self.envVariables.update({'INTERPRETER_PATH':self.driverLang.interpreter_path})
        else:
            del self.envVariables['INTERPRETER_PATH']
        
        # -- start the test process
        
        self.__console_output = tempfile.NamedTemporaryFile() # ToDo: allow this to be redirected
        
        self.testProcess = subprocess.Popen(self.command, stdout=self.__console_output, stderr=self.__console_output, preexec_fn=os.setpgrp, env=self.envVariables)
    
    def checkTestDone(self):
        '''Check on a running test, reply with True if running, False if ended'''
        
        if self.__status != 'running':
            raise RuntimeError('checkTest called on a test that was %s' % self.__status)
        
        # --
        
        if self.testProcess.poll() is None:
            return False
        
        elif self.testProcess.returncode == 0:
            self.result = 'suceeded'
            self.returncode = self.testProcess.returncode
        
        elif self.testProcess.returncode < 0:
            self.result = 'crashed'
            self.returncode = self.testProcess.returncode
        
        else:
            self.result = 'failed'
            self.returncode = self.testProcess.returncode
        
        # -- kill everything in the process group, just in case
        
        utils.kill_process_group(self.testProcess.pid)
        
        # -- set the end markers
        
        self.testDurration = time.time() - self.setupStartTime - self.setupDurration
        self.__status = 'ended'
        
        # -- return True to signal it has ended
        
        return True
    
    def endTest(self, result=None, errorMessage=None, errorDetails=None):
        '''Interrupts a runnning test'''
        
        if not self.__status in ('running', 'setting up'):
            raise RuntimeError('endTest called on a test that was %s' % self.__status)
        
        self.errorMessage = errorMessage
        self.errorDetails = errorDetails
        
        # -- kill everything in the process group
        
        if self.testProcess is not None and self.testProcess.pid is not None:
            utils.kill_process_group(self.testProcess.pid)
        
        # -- set the end markers
        
        if self.__status == 'setting up':
            self.setupDurration = time.time() - self.setupStartTime
            self.result = result or 'failed setup'
        elif self.__status == 'running':
            self.testDurration = time.time() - self.setupStartTime - self.setupDurration
            self.result = result or 'failed'
        
        if result == 'timed out':
            self.returncode = self.TIMED_OUT_EXIT_CODE
        
        self.__status = 'ended'
        self.returncode = None
        

class YamlTest(Test):
    buildFolder = os.path.join(os.path.realpath(os.path.dirname(__file__)), 'build')
    srcPath = None
    shards = None
    
    def __init__(self, name, path, driverLang=None, timeout=None, shards=1):
        self.srcPath = path
        self.shards = shards
        super(YamlTest, self).__init__(name, None, driverLang=driverLang, timeout=timeout)
    
    @property
    def interpreter_path(self):
        return self.driverLang.interpreter_path
    
    def setupTest(self):
        '''Build test executable'''
        
        super(YamlTest, self).setupTest()
        
        # -- ensure build folder exists
        
        try:
            os.makedirs(self.buildFolder)
        except OSError as e:
            if e.errno != 17:
                raise
        
        # -- build test file
        
        self.path = os.path.join(self.buildFolder, self.name.replace('/', '.'))
        
        TestGroup.buildYamlTest(testName=self.name, sourceFile=self.srcPath, language=self.driverLang, outputPath=self.path, shards=self.shards)
        
def getTestList(rootPath, languages, testFilters=None, shards=0):
    '''Get a list of Test objects for tests found in the given folder'''
    
    # -- input validation
    
    # rootPath
    
    if rootPath is None:
        raise ValueError('getTestList got None for rootPath')
    if not os.path.isdir(str(rootPath)):
        raise ValueError('getTestList got a non-directory as rootpath: %s' % str(rootPath))
    rootPath = os.path.realpath(rootPath)
    
    # testFilters
    
    if testFilters is not None:
        if not hasattr(testFilters, '__iter__'):
            testFilters = [testFilters]
        for testFilter in testFilters:
            if not hasattr(testFilter, 'match'):
                raise ValueError('getTestList got a non-regex value as a fiter: %s' % str(testFilter))
    
    # languages
    
    if languages is None:
        raise ValueError('getTestList requires one or more languages to look for')
    
    if not hasattr(languages, '__iter__'):
        languages = [languages]
    
    for language in languages:
        if not isinstance(language, SrcLang):
            raise ValueError('getTestList got a language that it does not know how to process: %s' % language)
        
    # -- find items in the directory
    
    foundTests = []
    
    for root, dirs, files in os.walk(rootPath):
        
        groupName = os.path.relpath(root, rootPath)
        if groupName in ('.', './'):
            groupName = ''
        if groupName == 'src' or groupName.startswith('src/'):
            groupName = 'polyglot' + groupName.lstrip('src')
        
        for fileName in [x for x in files if x.count('.') > 0]:
            
            testName, extension = os.path.splitext(fileName)
            extension = extension.lstrip('.').lower()
            
            testName, testLanguages = os.path.splitext(testName)
            testLanguages = testLanguages.lstrip('.').lower().split(',')
            
            testName = os.path.join(groupName, testName)
            
            if extension not in testExtensions:
                continue
            
            for language in languages:
                
                # - check that this test supports this language
                
                if extension == 'yaml':
                    pass # implicitly all languages
                elif not any((x in language.test_types for x in testLanguages)):
                    continue
                
                subTestName = '%s.%s' % (testName, language.test_types[0])
                
                # - run the filters

                if testFilters is not None and len(testFilters) > 0:
                    foundMatch = False
                    for testFilter in testFilters:
                        if testFilter.match(subTestName) is not None:
                            foundMatch = True
                            break
                    if foundMatch is False:
                        continue
                
                # - add the test
                
                if extension == 'yaml':
                    foundTests.append(YamlTest(name=subTestName, path=os.path.join(root, fileName), driverLang=language, shards=shards))
                else:
                    foundTests.append(Test(name=subTestName, path=os.path.join(root, fileName), driverLang=language))
    
    # --
    
    foundTests.sort(key=lambda x: (x.name, x.type))
    return foundTests

class WorkerThread(threading.Thread):
    '''Serially runs Test objects from its workQueue, managing a server instance and optinoally returning (status-test, test) tuples'''
    
    daemon = True
    workQueue = None
    outputQueue = None
    
    existingServer = None
    server = None
    serverLogFile = None
    reqlConnection = None
    
    def __init__(self, workQueue, outputQueue, existingServer=None):
        if workQueue is None or not isinstance(workQueue, Queue.Queue):
            raise ValueError('workQueue must be a Queue object')
        self.workQueue = workQueue
        
        if outputQueue is not None and not isinstance(outputQueue, Queue.Queue):
            raise ValueError('outputQueueu must be a Queue object')
        self.outputQueue = outputQueue
        
        if existingServer is not None:
            if isinstance(existingServer, RethinkDBRunningServer):
                self.existingServer = existingServer
                self.server = existingServer
            else:
                raise Exception('existingServer must be an instance of RethinkDBRunningServer, got: %s' % repr(existingServer))
        
        super(WorkerThread, self).__init__()
        self.start()
    
    def run_server(self):
        '''Ensure that we have a running server'''
        
        # -- check for an already running server
        
        self.check_server()
        
        # -- start a new server
        
        if self.server is None:
            self.server = driver.Process(console_output=True, wait_until_ready=True)
        
        # -- check that it is running
        
        if not self.check_server():
            raise Exception ('Server could not be started!') # ToDo: figure out how to report this properly
        
        # -- ensure that it is clean
        
        self.clean_server()
    
    def check_server(self):
        '''Check that the server is up, an responds to a basic query'''
        
        if self.server is None:
            self.reqlConnection = None # just in case
            return False
        
        try:
            if self.existingServer is None:
                self.server.check()
            
            # a basic test
            if self.reqlConnection is None:
                self.reqlConnection = r.connect(host=self.server.host, port=self.server.driver_port)
            r.db_list().run(self.reqlConnection)
        
        except (RuntimeError, r.RqlDriverError):
            if self.existingServer:
                raise Exception('External server stopped responding while testing') # ToDo: make this a better error
            else:
                warnings.warn('Server was not running or avalible, starting a new one') # ToDo: figure out how to link this back to the last test
                self.reqlConnection = None
                try:
                    self.server.close()
                except Exception: pass
                self.server = None
                return False
        return True
    
    def clean_server(self):
        '''Clean out the server so it only has the rethinkdb and an empty test databases'''
        assert self.existingServer is None
        
        if self.reqlConnection is None:
            raise ValueError('clean_server called when there was no connection')
        
        try:
        
            # -- clean out other databases
            
            for dbName in r.db_list().run(self.reqlConnection):
                if dbName in ('test', 'rethinkdb'):
                    continue
                else:
                    r.db_drop(dbName).run(self.reqlConnection)
            
            # -- ensure that the test db is present and empty
            
            if 'test' not in r.db_list().run(self.reqlConnection):
                r.db_create('test').run(self.reqlConnection)
            else:
                for tableName in r.db('test').table_list().run(self.reqlConnection):
                    r.db('test').table_drop(tableName).run(self.reqlConnection)
            
            # -- drop any tables in test
            
            r.db('test').table_list().for_each(lambda tableName: r.db('test').table_drop(tableName)).run(self.reqlConnection)
            
            # -- remove any other connected servers
            
            r.db('rethinkdb').table('server_config').filter(r.row['id'] != self.server.uuid).delete().run(self.reqlConnection)
            r.table_wait().run(self.reqlConnection)
            
        except Exception as e:
            warnings.warn('Unable to clean server, starting a new one. Error message: %s' % str(e)) # ToDo: improve logging
            self.reqlConnection = None
            try:
                self.server.close()
            except Exception: pass
            self.server = None
    
    def run(self):
        try:
            while cancelRun is False:
                
                # -- ensure we have an avalible server
                
                if self.existingServer:
                    self.check_server()
                else:
                    self.run_server()
                
                # -- get a test
                
                test = None
                try:
                    test = self.workQueue.get_nowait()
                except Queue.Empty:
                    break
                
                # -- pre-process the test
                
                if self.outputQueue:
                    self.outputQueue.put(('setting up', test))
                
                try:
                    test.setupTest()
                except Exception as e:
                    traceback.print_exc()
                    test.endTest(errorMessage='Failed setting up' % str(test.name), errorDetails=traceback.format_exc())
                    self.outputQueue.put((test.status, test))
                
                # -- run the test
                
                try:
                    self.outputQueue.put(('running', test))
                    test.startTest(server=self.server)
                except Exception as e:
                    test.endTest(errorMessage='Failed starting test', errorDetails=traceback.format_exc())
                
                # - monitor the test running
                
                restartServer = False
                
                if test.status == 'running':
                    deadline = time.time() + test.timeout
                    
                    while time.time() < deadline:
                        if cancelRun is True:
                            test.endTest(result='canceled')
                            break
                        try:
                            if test.checkTestDone():
                                if test.returncode != 0:
                                    restartServer = True
                                break
                            try:
                                self.server.check()
                            except Exception as e:
                                test.endTest(result='crashed server', errorMessage='Server crashed durring testing' % test.timeout)
                                restartServer = True
                                # ToDo: copy the server logs into the folder
                                break
                            time.sleep(.1)
                        except Exception as e:
                            test.endTest(errorMessage='Exception while monitoring', errorDetails=traceback.format_exc())
                            self.outputQueue.put((test.status, test))
                    else:
                        # ToDo: sample running processes
                        test.endTest(result='timed out', errorMessage='Timed out after %d seconds' % test.timeout)
                
                # - check the server
                
                if test.result != 'crashed server':
                    try:
                        self.server.check()
                    except Exception as e:
                        if test.result == 'suceeded':
                            test.result = 'crashed server'
                        
                        if test.errorMessage is None:
                            test.errorMessage = 'Server crashed while running'
                        else:
                            test.errorMessage += ', and the crashed server while running'
                        
                        if test.errorDetails is None:
                            test.errorDetails = traceback.format_exc()
                        
                        # ToDo: copy the server logs into the folder
                
                if restartServer:
                    try:
                        self.server.close()
                    except Exception: pass
                    self.server = None
                
                # -- return result
                
                self.outputQueue.put((test.status, test))
                self.workQueue.task_done() # not really important
            
            # - shut down the server
            
            if self.server is not None:
                try:
                    self.server.close()
                except Exception: pass # ToDo: mark the last test bad if this fell over
                self.server = None
                
        except Exception as e:
            traceback.print_exc()
            raise Warning("Worker failure: " + unicode(e))

def main():
    
    testFilters = []
    testList = []
    rethinkdb_exe_path = None
    
    existingServer = None
    
    # -- parse command line options
    
    parser = optparse.OptionParser(usage='usage: %prog [options] [patterns]')
    
    parser.add_option('-l', '--list', dest='list_mode', default=False, action='store_true', help='list the tests and exit')
    
    parser.add_option('-b', '--server-binary', dest='rethinkdb_exe_path', default=None, help='path to RethinkDB server binary to test')
    parser.add_option(      '--clean', dest='clean_run_directory', default=False, action='store_true', help='clean the run directory before running')
    
    parser.add_option('-i', '--interpreter', dest='languages', action='callback', callback=check_language, choices=list(interpreters.keys()), type='choice', default=None, help='the language to test')
    parser.add_option('-s', '--shards', dest='shards', type='int', default=1, help='number of shards to run (default 1)')
    
    parser.add_option('-c', '--cluster-port', dest='cluster_port', default=None, type='int', help='cluster port of an already-running rethinkdb instance')
    parser.add_option('-d', '--driver-port', dest='driver_port', default=None, type='int', help='driver port of an already-running rethinkdb instance')
    parser.add_option('-t', '--table', dest='table', default=None, type='string', help='name of pre-existing table to run queries against')
    
    parser.add_option('-j', '--worker-threads', dest='workerThreads', default=2, type='int', help='number of worker threads to use (default 2)')
    
    options, args = parser.parse_args()
    
    # - options validation
    
    # cluster_port/driver_port
    
    if any([options.cluster_port, options.driver_port]) and not all([options.cluster_port, options.driver_port]):
        parser.error('If either of the following options are used, both must be specifed: -c/--cluster-port, -d/--driver-port')
    if options.driver_port is not None:
        existingServer = RethinkDBRunningServer(options.driver_port, options.cluster_port)
        # TODO: validate that this is actually a running server
        
        if options.shards != 1:
            parser.error('The -c/--cluster-port and -d/--driver-port options can not be used with -s/--shards')
    elif options.table:
        parser.error('If you specify -t/--table, you must also specify -c/--cluster-port and -d/--driver-port')
    
    if options.table and options.table.count(".") != 1:
        parser.error('Parameter to -t/--table should be of the form db.table')
    
    # - add filters
    
    for newFilter in args:
        try:
            testFilters.append(re.compile(newFilter))
        except Exception:
            parser.error('Invalid filter (regex) entry: %s' % newFilter)
    
    # - pull in environmental variables
    
    if len(testFilters) == 0:
        if os.getenv('RQL_TEST'):
            try:
                testFilters.append(re.compile(os.getenv('RQL_TEST')))
            except re.error:
                parser.error("'Invalid filter from ENV: %s" % os.getenv('RQL_TEST'))
        if os.getenv('TEST'):
            try:
                testFilters.append(re.compile(os.getenv('TEST')))
            except re.error:
                parser.error("'Invalid filter from ENV: %s" % os.getenv('TEST'))
    
    # - default options
    
    if options.languages is None:
        options.languages = []
        for languageGroup in (interpreters['js'], interpreters['py'], interpreters['rb']):
            for language in languageGroup:
                try:
                    language.interpreter_path # raises exception if not present/found
                    options.languages.append(language)
                    break
                except Exception: pass
        if len(options.languages) == 0:
            parser.error('Unable to find interperters for any of the default languages')
    
    # -- get the list of tests
    
    testList = getTestList(os.path.realpath(os.path.dirname(__file__)), languages=options.languages, testFilters=testFilters, shards=options.shards)
    
    # -- clean run dir if requested
    
    if options.clean_run_directory is True:
        runDirPath = os.path.join(os.path.realpath(os.path.dirname(__file__)), 'run')
        if os.path.exists(runDirPath) and not os.path.islink(runDirPath):
            if os.path.isdir(runDirPath):
                shutil.rmtree(runDirPath)
            else:
                os.unlink(runDirPath)
    
    # -- short-circut if there are no tests
    
    if len(testList) == 0:
        languagesString = 'for the language: '
        if len(options.languages) > 1:
            languagesString = 'for the languages: '
        languagesString += ', '.join([lang.display_name for lang in options.languages])
        if len(args) == 1:
            sys.stderr.write('There are no tests that match the filter: %s %s\n' % (args[0], languagesString))
        elif len(args) > 1:
            sys.stderr.write('There are no tests that match any of the filters: %s %s\n' % (args, languagesString))
        else:
            sys.stderr.write('There are no tests %s\n' % languagesString)
        sys.exit()
    
    # -- print list if requested
    
    if options.list_mode is True:
        for test in testList:
            print(test.name)
        sys.exit()
    
    # -- reduce the langauges to only ones we have tests selected for
    
    for language in options.languages[:]:
        foundLangauge = False
        for test in testList:
            if test.driverLang == language:
                foundLangauge = True
                break
        if not foundLangauge:
            options.languages.remove(language)
            sys.stderr.write('Warning: did not find any tests for %s\n' % language.display_name)
    
    # -- check the rethinkdb_exe_path
    
    if options.rethinkdb_exe_path is None:
        try:
            rethinkdb_exe_path = utils.find_rethinkdb_executable()
        except test_exceptions.TestingFrameworkException as e:
            sys.exit(str(e))
    else:
        rethinkdb_exe_path = options.rethinkdb_exe_path
    
    if not os.access(rethinkdb_exe_path, os.X_OK):
        sys.exit('Error: selected RethiinkDB server binary does not look valid: %s' % rethinkdb_exe_path)
    
    # -- set ENV settings for child processes
    
    os.environ['JAVASCRIPT_DRIVER_DIR'] = utils.driverPaths['javascript']['driverPath']
    os.environ['PYTHON_DRIVER_DIR'] = utils.driverPaths['python']['driverPath']
    os.environ['RUBY_DRIVER_DIR'] = utils.driverPaths['ruby']['driverPath']
    
    os.environ['RDB_EXE_PATH'] = rethinkdb_exe_path
    
    if options.table:
        os.environ['TEST_DB_AND_TABLE_NAME'] = options.table
    
    # -- make sure the drivers are built
    
    for language in options.languages:
        outputFile = tempfile.NamedTemporaryFile(mode='w+')
        notificationDeadline = time.time() + 3
        makeProcess = subprocess.Popen(['make', '-C', language.driver_source_path], stdout=outputFile, stderr=subprocess.STDOUT)
        while makeProcess.poll() is None and time.time() < notificationDeadline:
            time.sleep(.1)
        if time.time() > notificationDeadline:
            print('Building the %s drivers. This make take a few moments.' % language.display_name)
        if makeProcess.wait() != 0:
            sys.stderr.write('Error making %s driver. Make output follows:\n\n' % os.path.basename(__file__))
            outputFile.seek(0)
            print(outputFile.read().decode('utf-8'))
            sys.exit(1)
        
        os.environ[language.driver_build_env_name] = language.driver_build_path
    
    # -- print pre-testing info
    
    print('Using rethinkdb binary %s' % rethinkdb_exe_path)
    for thisLanguage in options.languages:
        print('\t%s interpreter: %s, driver: %s' % (thisLanguage.display_name, thisLanguage.interpreter_path, thisLanguage.driver_source_path))
    
    startTime = time.time()
    
    # -- add tests to queues
    
    testQueue = Queue.Queue()
    outputQueue = Queue.Queue()
    
    for test in testList:
        testQueue.put(test)
    
    # -- start the worker threads
    
    workerThreads = [WorkerThread(workQueue=testQueue, outputQueue=outputQueue, existingServer=existingServer) for x in range(options.workerThreads)]
    
    # -- monitor progress
    
    failedTests = []
    
    preparingTests = 0
    runningTests = 0
    waitingTests = len(testList)
    canceledTests = 0
    passedTests = 0
    
    while True:
        
        # - print all status messages
        
        while True:
            
            message = None
            test = None
            try:
                message, test = outputQueue.get_nowait()
            except Queue.Empty:
                break
            
            timeString = 'T+ %.1f sec' % (time.time() - startTime)
            
            if message == 'queued':
                pass
            elif message == 'setting up':
                sys.stdout.write('== Starting: %s (%s)\n' % (test.name, timeString))
                preparingTests -= 1
                preparingTests += 1
            elif message == 'running':
                #sys.stdout.write('== Running: %s (%s)\n' % (test.name, timeString))
                waitingTests -= 1
                runningTests += 1
            elif message == 'ended':
                runningTests -= 1
                
                durrationString = '%.1f sec' % (test.durration)
                                
                if test.result is None:
                    raise Warning('Got None for test.result, this should not happen')
                    continue
                
                if test.result == 'suceeded':
                    sys.stdout.write('== Passed: %s in %s (%s)\n' % (test.name, durrationString, timeString))
                    passedTests += 1
                
                elif test.result == 'canceled':
                    sys.stdout.write('== Canceled: %s after %s (%s)\n' % (test.name, durrationString, timeString))
                    canceledTests += 1
                
                else:
                    failedTests.append(test)
                    
                    extraMessage = ''
                    if test.result == 'failed':
                        extraMessage = ' with exit code %s' % test.returncode
                    elif test.result == 'crashed':
                        extraMessage = ' with signal %s' % abs(test.returncode)
                    elif test.result == 'timed out':
                        extraMessage = ' after %d seconds' % test.durration
                    
                    sys.stderr.write('>>> %s%s: %s after %s (%s)\n\n' % (test.result.capitalize(), extraMessage, test.name, durrationString, timeString))
                    sys.stderr.write(test.console_output)
                    sys.stderr.write('\n<<< end %s: %s\n' % (test.result.capitalize(), test.name))
        
        # - end if there are no worker threads
        
        if len(workerThreads) == 0:
            break
        
        # - reap dead worker threads
        
        for worker in copy.copy(workerThreads):
            if not worker.isAlive():
                worker.join(.01) # should never timeout, but just in case
                workerThreads.remove(worker)
        
        # -
        
        time.sleep(.1)
    
    # -- check that all tests have a finished status
    
    if cancelRun is False:
        for test in testList:
            if test.status != 'ended':
                raise Warning('Test was in state "%s" after run: %s' % (test.status, test.name))
    
    # -- report final results
    
    failedTestNames = [test.name for test in failedTests]
    
    if cancelRun is True:
        print('\n== Canceled after %.2f seconds with %d test%s running. %s test%s passed, %s test%s failed, and %s test%s remaining%s' % (
            time.time() - startTime,
            canceledTests, 's' if canceledTests != 1 else '',
            passedTests, 's' if passedTests != 1 else '',
            len(failedTestNames), 's' if len(failedTestNames) != 1 else '',
            waitingTests, 's' if waitingTests != 1 else '',
            ('\n\t%s\n' % ('\n\t'.join(failedTestNames) if len(failedTestNames) > 0 else ''))
        ))  
    elif len(failedTests) == 0:
        testNumberMessage = 'the 1 test'
        if len(testList) > 1:
            testNumberMessage = 'all %s tests' % len(testList)
        print('\n== Sucessfully passed %s in %.2f seconds!' % (testNumberMessage, time.time() - startTime))
        sys.exit()
    else:
        plural = 's' if len(failedTests) > 1 else ''
        sys.exit('\n== Failed %d test%s (of %d) in %.2f seconds!\n\t%s\n\n' % (len(failedTests), plural, len(testList), time.time() - startTime, '\n\t'.join(failedTestNames)))
        
if __name__ == '__main__':
    main()
