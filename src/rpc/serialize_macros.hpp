// Copyright 2010-2014 RethinkDB, all rights reserved.
#ifndef RPC_SERIALIZE_MACROS_HPP_
#define RPC_SERIALIZE_MACROS_HPP_

/* This file is automatically generated by '../scripts/generate_serialize_macros.py'.
Please modify '../scripts/generate_serialize_macros.py' instead of modifying this file.*/

#include "containers/archive/archive.hpp"

/* The purpose of these macros is to make it easier to serialize and
unserialize data types that consist of a simple series of fields, each
of which is serializable. Suppose we have a type "struct point_t {
int32_t x, y; }" that we want to be able to serialize. To make it
serializable automatically, either write
RDB_MAKE_SERIALIZABLE_2(point_t, x, y) at the global scope, or write
RDB_MAKE_ME_SERIALIZABLE(x, y) within the body of the point_t type and
RDB_SERIALIZE_OUTSIDE(point_t) in the global scope.

We use dummy "extern int" declarations to force a compile error in
macros that should not be used inside of class bodies. */

#define RDB_DECLARE_SERIALIZABLE(type_t) \
    template <cluster_version_t W> \
    void serialize(write_message_t *, const type_t &); \
    template <cluster_version_t W> \
    archive_result_t deserialize(read_stream_t *s, type_t *thing)

#define RDB_DECLARE_ME_SERIALIZABLE \
    friend class write_message_t; \
    template <cluster_version_t W> \
    void rdb_serialize(write_message_t *wm) const; \
    friend class archive_deserializer_t; \
    template <cluster_version_t W> \
    archive_result_t rdb_deserialize(read_stream_t *s)

#define RDB_SERIALIZE_OUTSIDE(type_t) \
    template <cluster_version_t W> \
    void serialize(write_message_t *wm, const type_t &thing) { \
        thing.template rdb_serialize<W>(wm); \
    } \
    template <cluster_version_t W> \
    MUST_USE archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        return thing->template rdb_deserialize<W>(s); \
    } \
    extern int dont_use_RDB_SERIALIZE_OUTSIDE_within_a_class_body

#define RDB_SERIALIZE_TEMPLATED_OUTSIDE(type_t) \
    template <cluster_version_t W, class T> \
    void serialize(write_message_t *wm, const type_t<T> &thing) { \
        thing.template rdb_serialize<W>(wm); \
    } \
    template <cluster_version_t W, class T> \
    MUST_USE archive_result_t deserialize(read_stream_t *s, type_t<T> *thing) { \
        return thing->template rdb_deserialize<W>(s); \
    } \
    extern int dont_use_RDB_SERIALIZE_OUTSIDE_within_a_class_body

#define RDB_SERIALIZE_TEMPLATED_2_OUTSIDE(type_t) \
    template <cluster_version_t W, class T, class U> \
    void serialize(write_message_t *wm, const type_t<T, U> &thing) { \
        thing.template rdb_serialize<W>(wm); \
    } \
    template <cluster_version_t W, class T, class U> \
    MUST_USE archive_result_t deserialize(read_stream_t *s, type_t<T, U> *thing) { \
        return thing->template rdb_deserialize<W>(s); \
    } \
    extern int dont_use_RDB_SERIALIZE_OUTSIDE_within_a_class_body

#define RDB_MAKE_SERIALIZABLE_0(type_t) \
    template <cluster_version_t W> \
    void serialize(UNUSED write_message_t *wm, UNUSED const type_t &thing) { \
    } \
    template <cluster_version_t W> \
    archive_result_t deserialize(UNUSED read_stream_t *s, UNUSED type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body
#define RDB_IMPL_SERIALIZABLE_0(type_t) RDB_MAKE_SERIALIZABLE_0(type_t); \
    template void serialize<cluster_version_t::v1_13_is_latest>(write_message_t *, const type_t &); \
    template archive_result_t deserialize<cluster_version_t::v1_13_is_latest>(read_stream_t *, type_t *)

#define RDB_MAKE_ME_SERIALIZABLE_0() \
    friend class write_message_t; \
    template <cluster_version_t W> \
    void rdb_serialize(UNUSED write_message_t *wm) const { \
    } \
    template <cluster_version_t W> \
    archive_result_t rdb_deserialize(UNUSED read_stream_t *s) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        return res; \
    } \
    friend class archive_deserializer_t

#define RDB_IMPL_ME_SERIALIZABLE_0(typ) \
    template <cluster_version_t W> \
    void typ::rdb_serialize(UNUSED write_message_t *wm) const { \
    } \
    template <cluster_version_t W> \
    archive_result_t typ::rdb_deserialize(UNUSED read_stream_t *s) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        return res; \
    } \
    template void typ::rdb_serialize<cluster_version_t::v1_13_is_latest>(write_message_t *) const; \
    template archive_result_t typ::rdb_deserialize<cluster_version_t::v1_13_is_latest>(read_stream_t *s)

#define RDB_MAKE_SERIALIZABLE_1(type_t, field1) \
    template <cluster_version_t W> \
    void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
    } \
    template <cluster_version_t W> \
    archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body
#define RDB_IMPL_SERIALIZABLE_1(type_t, field1) RDB_MAKE_SERIALIZABLE_1(type_t, field1); \
    template void serialize<cluster_version_t::v1_13_is_latest>(write_message_t *, const type_t &); \
    template archive_result_t deserialize<cluster_version_t::v1_13_is_latest>(read_stream_t *, type_t *)

#define RDB_MAKE_ME_SERIALIZABLE_1(field1) \
    friend class write_message_t; \
    template <cluster_version_t W> \
    void rdb_serialize(write_message_t *wm) const { \
        serialize<W>(wm, field1); \
    } \
    template <cluster_version_t W> \
    archive_result_t rdb_deserialize(read_stream_t *s) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(field1)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    friend class archive_deserializer_t

#define RDB_IMPL_ME_SERIALIZABLE_1(typ, field1) \
    template <cluster_version_t W> \
    void typ::rdb_serialize(write_message_t *wm) const { \
        serialize<W>(wm, field1); \
    } \
    template <cluster_version_t W> \
    archive_result_t typ::rdb_deserialize(read_stream_t *s) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(field1)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    template void typ::rdb_serialize<cluster_version_t::v1_13_is_latest>(write_message_t *) const; \
    template archive_result_t typ::rdb_deserialize<cluster_version_t::v1_13_is_latest>(read_stream_t *s)

#define RDB_MAKE_SERIALIZABLE_2(type_t, field1, field2) \
    template <cluster_version_t W> \
    void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
    } \
    template <cluster_version_t W> \
    archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body
#define RDB_IMPL_SERIALIZABLE_2(type_t, field1, field2) RDB_MAKE_SERIALIZABLE_2(type_t, field1, field2); \
    template void serialize<cluster_version_t::v1_13_is_latest>(write_message_t *, const type_t &); \
    template archive_result_t deserialize<cluster_version_t::v1_13_is_latest>(read_stream_t *, type_t *)

#define RDB_MAKE_ME_SERIALIZABLE_2(field1, field2) \
    friend class write_message_t; \
    template <cluster_version_t W> \
    void rdb_serialize(write_message_t *wm) const { \
        serialize<W>(wm, field1); \
        serialize<W>(wm, field2); \
    } \
    template <cluster_version_t W> \
    archive_result_t rdb_deserialize(read_stream_t *s) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field2)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    friend class archive_deserializer_t

#define RDB_IMPL_ME_SERIALIZABLE_2(typ, field1, field2) \
    template <cluster_version_t W> \
    void typ::rdb_serialize(write_message_t *wm) const { \
        serialize<W>(wm, field1); \
        serialize<W>(wm, field2); \
    } \
    template <cluster_version_t W> \
    archive_result_t typ::rdb_deserialize(read_stream_t *s) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field2)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    template void typ::rdb_serialize<cluster_version_t::v1_13_is_latest>(write_message_t *) const; \
    template archive_result_t typ::rdb_deserialize<cluster_version_t::v1_13_is_latest>(read_stream_t *s)

#define RDB_MAKE_SERIALIZABLE_3(type_t, field1, field2, field3) \
    template <cluster_version_t W> \
    void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
        serialize<W>(wm, thing.field3); \
    } \
    template <cluster_version_t W> \
    archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body
#define RDB_IMPL_SERIALIZABLE_3(type_t, field1, field2, field3) RDB_MAKE_SERIALIZABLE_3(type_t, field1, field2, field3); \
    template void serialize<cluster_version_t::v1_13_is_latest>(write_message_t *, const type_t &); \
    template archive_result_t deserialize<cluster_version_t::v1_13_is_latest>(read_stream_t *, type_t *)

#define RDB_MAKE_ME_SERIALIZABLE_3(field1, field2, field3) \
    friend class write_message_t; \
    template <cluster_version_t W> \
    void rdb_serialize(write_message_t *wm) const { \
        serialize<W>(wm, field1); \
        serialize<W>(wm, field2); \
        serialize<W>(wm, field3); \
    } \
    template <cluster_version_t W> \
    archive_result_t rdb_deserialize(read_stream_t *s) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field3)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    friend class archive_deserializer_t

#define RDB_IMPL_ME_SERIALIZABLE_3(typ, field1, field2, field3) \
    template <cluster_version_t W> \
    void typ::rdb_serialize(write_message_t *wm) const { \
        serialize<W>(wm, field1); \
        serialize<W>(wm, field2); \
        serialize<W>(wm, field3); \
    } \
    template <cluster_version_t W> \
    archive_result_t typ::rdb_deserialize(read_stream_t *s) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field3)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    template void typ::rdb_serialize<cluster_version_t::v1_13_is_latest>(write_message_t *) const; \
    template archive_result_t typ::rdb_deserialize<cluster_version_t::v1_13_is_latest>(read_stream_t *s)

#define RDB_MAKE_SERIALIZABLE_4(type_t, field1, field2, field3, field4) \
    template <cluster_version_t W> \
    void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
        serialize<W>(wm, thing.field3); \
        serialize<W>(wm, thing.field4); \
    } \
    template <cluster_version_t W> \
    archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body
#define RDB_IMPL_SERIALIZABLE_4(type_t, field1, field2, field3, field4) RDB_MAKE_SERIALIZABLE_4(type_t, field1, field2, field3, field4); \
    template void serialize<cluster_version_t::v1_13_is_latest>(write_message_t *, const type_t &); \
    template archive_result_t deserialize<cluster_version_t::v1_13_is_latest>(read_stream_t *, type_t *)

#define RDB_MAKE_ME_SERIALIZABLE_4(field1, field2, field3, field4) \
    friend class write_message_t; \
    template <cluster_version_t W> \
    void rdb_serialize(write_message_t *wm) const { \
        serialize<W>(wm, field1); \
        serialize<W>(wm, field2); \
        serialize<W>(wm, field3); \
        serialize<W>(wm, field4); \
    } \
    template <cluster_version_t W> \
    archive_result_t rdb_deserialize(read_stream_t *s) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field4)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    friend class archive_deserializer_t

#define RDB_IMPL_ME_SERIALIZABLE_4(typ, field1, field2, field3, field4) \
    template <cluster_version_t W> \
    void typ::rdb_serialize(write_message_t *wm) const { \
        serialize<W>(wm, field1); \
        serialize<W>(wm, field2); \
        serialize<W>(wm, field3); \
        serialize<W>(wm, field4); \
    } \
    template <cluster_version_t W> \
    archive_result_t typ::rdb_deserialize(read_stream_t *s) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field4)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    template void typ::rdb_serialize<cluster_version_t::v1_13_is_latest>(write_message_t *) const; \
    template archive_result_t typ::rdb_deserialize<cluster_version_t::v1_13_is_latest>(read_stream_t *s)

#define RDB_MAKE_SERIALIZABLE_5(type_t, field1, field2, field3, field4, field5) \
    template <cluster_version_t W> \
    void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
        serialize<W>(wm, thing.field3); \
        serialize<W>(wm, thing.field4); \
        serialize<W>(wm, thing.field5); \
    } \
    template <cluster_version_t W> \
    archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body
#define RDB_IMPL_SERIALIZABLE_5(type_t, field1, field2, field3, field4, field5) RDB_MAKE_SERIALIZABLE_5(type_t, field1, field2, field3, field4, field5); \
    template void serialize<cluster_version_t::v1_13_is_latest>(write_message_t *, const type_t &); \
    template archive_result_t deserialize<cluster_version_t::v1_13_is_latest>(read_stream_t *, type_t *)

#define RDB_MAKE_ME_SERIALIZABLE_5(field1, field2, field3, field4, field5) \
    friend class write_message_t; \
    template <cluster_version_t W> \
    void rdb_serialize(write_message_t *wm) const { \
        serialize<W>(wm, field1); \
        serialize<W>(wm, field2); \
        serialize<W>(wm, field3); \
        serialize<W>(wm, field4); \
        serialize<W>(wm, field5); \
    } \
    template <cluster_version_t W> \
    archive_result_t rdb_deserialize(read_stream_t *s) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field5)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    friend class archive_deserializer_t

#define RDB_IMPL_ME_SERIALIZABLE_5(typ, field1, field2, field3, field4, field5) \
    template <cluster_version_t W> \
    void typ::rdb_serialize(write_message_t *wm) const { \
        serialize<W>(wm, field1); \
        serialize<W>(wm, field2); \
        serialize<W>(wm, field3); \
        serialize<W>(wm, field4); \
        serialize<W>(wm, field5); \
    } \
    template <cluster_version_t W> \
    archive_result_t typ::rdb_deserialize(read_stream_t *s) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field5)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    template void typ::rdb_serialize<cluster_version_t::v1_13_is_latest>(write_message_t *) const; \
    template archive_result_t typ::rdb_deserialize<cluster_version_t::v1_13_is_latest>(read_stream_t *s)

#define RDB_MAKE_SERIALIZABLE_6(type_t, field1, field2, field3, field4, field5, field6) \
    template <cluster_version_t W> \
    void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
        serialize<W>(wm, thing.field3); \
        serialize<W>(wm, thing.field4); \
        serialize<W>(wm, thing.field5); \
        serialize<W>(wm, thing.field6); \
    } \
    template <cluster_version_t W> \
    archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body
#define RDB_IMPL_SERIALIZABLE_6(type_t, field1, field2, field3, field4, field5, field6) RDB_MAKE_SERIALIZABLE_6(type_t, field1, field2, field3, field4, field5, field6); \
    template void serialize<cluster_version_t::v1_13_is_latest>(write_message_t *, const type_t &); \
    template archive_result_t deserialize<cluster_version_t::v1_13_is_latest>(read_stream_t *, type_t *)

#define RDB_MAKE_ME_SERIALIZABLE_6(field1, field2, field3, field4, field5, field6) \
    friend class write_message_t; \
    template <cluster_version_t W> \
    void rdb_serialize(write_message_t *wm) const { \
        serialize<W>(wm, field1); \
        serialize<W>(wm, field2); \
        serialize<W>(wm, field3); \
        serialize<W>(wm, field4); \
        serialize<W>(wm, field5); \
        serialize<W>(wm, field6); \
    } \
    template <cluster_version_t W> \
    archive_result_t rdb_deserialize(read_stream_t *s) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field6)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    friend class archive_deserializer_t

#define RDB_IMPL_ME_SERIALIZABLE_6(typ, field1, field2, field3, field4, field5, field6) \
    template <cluster_version_t W> \
    void typ::rdb_serialize(write_message_t *wm) const { \
        serialize<W>(wm, field1); \
        serialize<W>(wm, field2); \
        serialize<W>(wm, field3); \
        serialize<W>(wm, field4); \
        serialize<W>(wm, field5); \
        serialize<W>(wm, field6); \
    } \
    template <cluster_version_t W> \
    archive_result_t typ::rdb_deserialize(read_stream_t *s) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field6)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    template void typ::rdb_serialize<cluster_version_t::v1_13_is_latest>(write_message_t *) const; \
    template archive_result_t typ::rdb_deserialize<cluster_version_t::v1_13_is_latest>(read_stream_t *s)

#define RDB_MAKE_SERIALIZABLE_7(type_t, field1, field2, field3, field4, field5, field6, field7) \
    template <cluster_version_t W> \
    void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
        serialize<W>(wm, thing.field3); \
        serialize<W>(wm, thing.field4); \
        serialize<W>(wm, thing.field5); \
        serialize<W>(wm, thing.field6); \
        serialize<W>(wm, thing.field7); \
    } \
    template <cluster_version_t W> \
    archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field7)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body
#define RDB_IMPL_SERIALIZABLE_7(type_t, field1, field2, field3, field4, field5, field6, field7) RDB_MAKE_SERIALIZABLE_7(type_t, field1, field2, field3, field4, field5, field6, field7); \
    template void serialize<cluster_version_t::v1_13_is_latest>(write_message_t *, const type_t &); \
    template archive_result_t deserialize<cluster_version_t::v1_13_is_latest>(read_stream_t *, type_t *)

#define RDB_MAKE_ME_SERIALIZABLE_7(field1, field2, field3, field4, field5, field6, field7) \
    friend class write_message_t; \
    template <cluster_version_t W> \
    void rdb_serialize(write_message_t *wm) const { \
        serialize<W>(wm, field1); \
        serialize<W>(wm, field2); \
        serialize<W>(wm, field3); \
        serialize<W>(wm, field4); \
        serialize<W>(wm, field5); \
        serialize<W>(wm, field6); \
        serialize<W>(wm, field7); \
    } \
    template <cluster_version_t W> \
    archive_result_t rdb_deserialize(read_stream_t *s) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field7)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    friend class archive_deserializer_t

#define RDB_IMPL_ME_SERIALIZABLE_7(typ, field1, field2, field3, field4, field5, field6, field7) \
    template <cluster_version_t W> \
    void typ::rdb_serialize(write_message_t *wm) const { \
        serialize<W>(wm, field1); \
        serialize<W>(wm, field2); \
        serialize<W>(wm, field3); \
        serialize<W>(wm, field4); \
        serialize<W>(wm, field5); \
        serialize<W>(wm, field6); \
        serialize<W>(wm, field7); \
    } \
    template <cluster_version_t W> \
    archive_result_t typ::rdb_deserialize(read_stream_t *s) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field7)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    template void typ::rdb_serialize<cluster_version_t::v1_13_is_latest>(write_message_t *) const; \
    template archive_result_t typ::rdb_deserialize<cluster_version_t::v1_13_is_latest>(read_stream_t *s)

#define RDB_MAKE_SERIALIZABLE_8(type_t, field1, field2, field3, field4, field5, field6, field7, field8) \
    template <cluster_version_t W> \
    void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
        serialize<W>(wm, thing.field3); \
        serialize<W>(wm, thing.field4); \
        serialize<W>(wm, thing.field5); \
        serialize<W>(wm, thing.field6); \
        serialize<W>(wm, thing.field7); \
        serialize<W>(wm, thing.field8); \
    } \
    template <cluster_version_t W> \
    archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field8)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body
#define RDB_IMPL_SERIALIZABLE_8(type_t, field1, field2, field3, field4, field5, field6, field7, field8) RDB_MAKE_SERIALIZABLE_8(type_t, field1, field2, field3, field4, field5, field6, field7, field8); \
    template void serialize<cluster_version_t::v1_13_is_latest>(write_message_t *, const type_t &); \
    template archive_result_t deserialize<cluster_version_t::v1_13_is_latest>(read_stream_t *, type_t *)

#define RDB_MAKE_ME_SERIALIZABLE_8(field1, field2, field3, field4, field5, field6, field7, field8) \
    friend class write_message_t; \
    template <cluster_version_t W> \
    void rdb_serialize(write_message_t *wm) const { \
        serialize<W>(wm, field1); \
        serialize<W>(wm, field2); \
        serialize<W>(wm, field3); \
        serialize<W>(wm, field4); \
        serialize<W>(wm, field5); \
        serialize<W>(wm, field6); \
        serialize<W>(wm, field7); \
        serialize<W>(wm, field8); \
    } \
    template <cluster_version_t W> \
    archive_result_t rdb_deserialize(read_stream_t *s) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field8)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    friend class archive_deserializer_t

#define RDB_IMPL_ME_SERIALIZABLE_8(typ, field1, field2, field3, field4, field5, field6, field7, field8) \
    template <cluster_version_t W> \
    void typ::rdb_serialize(write_message_t *wm) const { \
        serialize<W>(wm, field1); \
        serialize<W>(wm, field2); \
        serialize<W>(wm, field3); \
        serialize<W>(wm, field4); \
        serialize<W>(wm, field5); \
        serialize<W>(wm, field6); \
        serialize<W>(wm, field7); \
        serialize<W>(wm, field8); \
    } \
    template <cluster_version_t W> \
    archive_result_t typ::rdb_deserialize(read_stream_t *s) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field8)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    template void typ::rdb_serialize<cluster_version_t::v1_13_is_latest>(write_message_t *) const; \
    template archive_result_t typ::rdb_deserialize<cluster_version_t::v1_13_is_latest>(read_stream_t *s)

#define RDB_MAKE_SERIALIZABLE_9(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9) \
    template <cluster_version_t W> \
    void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
        serialize<W>(wm, thing.field3); \
        serialize<W>(wm, thing.field4); \
        serialize<W>(wm, thing.field5); \
        serialize<W>(wm, thing.field6); \
        serialize<W>(wm, thing.field7); \
        serialize<W>(wm, thing.field8); \
        serialize<W>(wm, thing.field9); \
    } \
    template <cluster_version_t W> \
    archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field9)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body
#define RDB_IMPL_SERIALIZABLE_9(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9) RDB_MAKE_SERIALIZABLE_9(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9); \
    template void serialize<cluster_version_t::v1_13_is_latest>(write_message_t *, const type_t &); \
    template archive_result_t deserialize<cluster_version_t::v1_13_is_latest>(read_stream_t *, type_t *)

#define RDB_MAKE_ME_SERIALIZABLE_9(field1, field2, field3, field4, field5, field6, field7, field8, field9) \
    friend class write_message_t; \
    template <cluster_version_t W> \
    void rdb_serialize(write_message_t *wm) const { \
        serialize<W>(wm, field1); \
        serialize<W>(wm, field2); \
        serialize<W>(wm, field3); \
        serialize<W>(wm, field4); \
        serialize<W>(wm, field5); \
        serialize<W>(wm, field6); \
        serialize<W>(wm, field7); \
        serialize<W>(wm, field8); \
        serialize<W>(wm, field9); \
    } \
    template <cluster_version_t W> \
    archive_result_t rdb_deserialize(read_stream_t *s) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field9)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    friend class archive_deserializer_t

#define RDB_IMPL_ME_SERIALIZABLE_9(typ, field1, field2, field3, field4, field5, field6, field7, field8, field9) \
    template <cluster_version_t W> \
    void typ::rdb_serialize(write_message_t *wm) const { \
        serialize<W>(wm, field1); \
        serialize<W>(wm, field2); \
        serialize<W>(wm, field3); \
        serialize<W>(wm, field4); \
        serialize<W>(wm, field5); \
        serialize<W>(wm, field6); \
        serialize<W>(wm, field7); \
        serialize<W>(wm, field8); \
        serialize<W>(wm, field9); \
    } \
    template <cluster_version_t W> \
    archive_result_t typ::rdb_deserialize(read_stream_t *s) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field9)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    template void typ::rdb_serialize<cluster_version_t::v1_13_is_latest>(write_message_t *) const; \
    template archive_result_t typ::rdb_deserialize<cluster_version_t::v1_13_is_latest>(read_stream_t *s)

#define RDB_MAKE_SERIALIZABLE_10(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10) \
    template <cluster_version_t W> \
    void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
        serialize<W>(wm, thing.field3); \
        serialize<W>(wm, thing.field4); \
        serialize<W>(wm, thing.field5); \
        serialize<W>(wm, thing.field6); \
        serialize<W>(wm, thing.field7); \
        serialize<W>(wm, thing.field8); \
        serialize<W>(wm, thing.field9); \
        serialize<W>(wm, thing.field10); \
    } \
    template <cluster_version_t W> \
    archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field10)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body
#define RDB_IMPL_SERIALIZABLE_10(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10) RDB_MAKE_SERIALIZABLE_10(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10); \
    template void serialize<cluster_version_t::v1_13_is_latest>(write_message_t *, const type_t &); \
    template archive_result_t deserialize<cluster_version_t::v1_13_is_latest>(read_stream_t *, type_t *)

#define RDB_MAKE_ME_SERIALIZABLE_10(field1, field2, field3, field4, field5, field6, field7, field8, field9, field10) \
    friend class write_message_t; \
    template <cluster_version_t W> \
    void rdb_serialize(write_message_t *wm) const { \
        serialize<W>(wm, field1); \
        serialize<W>(wm, field2); \
        serialize<W>(wm, field3); \
        serialize<W>(wm, field4); \
        serialize<W>(wm, field5); \
        serialize<W>(wm, field6); \
        serialize<W>(wm, field7); \
        serialize<W>(wm, field8); \
        serialize<W>(wm, field9); \
        serialize<W>(wm, field10); \
    } \
    template <cluster_version_t W> \
    archive_result_t rdb_deserialize(read_stream_t *s) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field10)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    friend class archive_deserializer_t

#define RDB_IMPL_ME_SERIALIZABLE_10(typ, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10) \
    template <cluster_version_t W> \
    void typ::rdb_serialize(write_message_t *wm) const { \
        serialize<W>(wm, field1); \
        serialize<W>(wm, field2); \
        serialize<W>(wm, field3); \
        serialize<W>(wm, field4); \
        serialize<W>(wm, field5); \
        serialize<W>(wm, field6); \
        serialize<W>(wm, field7); \
        serialize<W>(wm, field8); \
        serialize<W>(wm, field9); \
        serialize<W>(wm, field10); \
    } \
    template <cluster_version_t W> \
    archive_result_t typ::rdb_deserialize(read_stream_t *s) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field10)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    template void typ::rdb_serialize<cluster_version_t::v1_13_is_latest>(write_message_t *) const; \
    template archive_result_t typ::rdb_deserialize<cluster_version_t::v1_13_is_latest>(read_stream_t *s)

#define RDB_MAKE_SERIALIZABLE_11(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11) \
    template <cluster_version_t W> \
    void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
        serialize<W>(wm, thing.field3); \
        serialize<W>(wm, thing.field4); \
        serialize<W>(wm, thing.field5); \
        serialize<W>(wm, thing.field6); \
        serialize<W>(wm, thing.field7); \
        serialize<W>(wm, thing.field8); \
        serialize<W>(wm, thing.field9); \
        serialize<W>(wm, thing.field10); \
        serialize<W>(wm, thing.field11); \
    } \
    template <cluster_version_t W> \
    archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field11)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body
#define RDB_IMPL_SERIALIZABLE_11(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11) RDB_MAKE_SERIALIZABLE_11(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11); \
    template void serialize<cluster_version_t::v1_13_is_latest>(write_message_t *, const type_t &); \
    template archive_result_t deserialize<cluster_version_t::v1_13_is_latest>(read_stream_t *, type_t *)

#define RDB_MAKE_ME_SERIALIZABLE_11(field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11) \
    friend class write_message_t; \
    template <cluster_version_t W> \
    void rdb_serialize(write_message_t *wm) const { \
        serialize<W>(wm, field1); \
        serialize<W>(wm, field2); \
        serialize<W>(wm, field3); \
        serialize<W>(wm, field4); \
        serialize<W>(wm, field5); \
        serialize<W>(wm, field6); \
        serialize<W>(wm, field7); \
        serialize<W>(wm, field8); \
        serialize<W>(wm, field9); \
        serialize<W>(wm, field10); \
        serialize<W>(wm, field11); \
    } \
    template <cluster_version_t W> \
    archive_result_t rdb_deserialize(read_stream_t *s) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field11)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    friend class archive_deserializer_t

#define RDB_IMPL_ME_SERIALIZABLE_11(typ, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11) \
    template <cluster_version_t W> \
    void typ::rdb_serialize(write_message_t *wm) const { \
        serialize<W>(wm, field1); \
        serialize<W>(wm, field2); \
        serialize<W>(wm, field3); \
        serialize<W>(wm, field4); \
        serialize<W>(wm, field5); \
        serialize<W>(wm, field6); \
        serialize<W>(wm, field7); \
        serialize<W>(wm, field8); \
        serialize<W>(wm, field9); \
        serialize<W>(wm, field10); \
        serialize<W>(wm, field11); \
    } \
    template <cluster_version_t W> \
    archive_result_t typ::rdb_deserialize(read_stream_t *s) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field11)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    template void typ::rdb_serialize<cluster_version_t::v1_13_is_latest>(write_message_t *) const; \
    template archive_result_t typ::rdb_deserialize<cluster_version_t::v1_13_is_latest>(read_stream_t *s)

#define RDB_MAKE_SERIALIZABLE_12(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12) \
    template <cluster_version_t W> \
    void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
        serialize<W>(wm, thing.field3); \
        serialize<W>(wm, thing.field4); \
        serialize<W>(wm, thing.field5); \
        serialize<W>(wm, thing.field6); \
        serialize<W>(wm, thing.field7); \
        serialize<W>(wm, thing.field8); \
        serialize<W>(wm, thing.field9); \
        serialize<W>(wm, thing.field10); \
        serialize<W>(wm, thing.field11); \
        serialize<W>(wm, thing.field12); \
    } \
    template <cluster_version_t W> \
    archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field11)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field12)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body
#define RDB_IMPL_SERIALIZABLE_12(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12) RDB_MAKE_SERIALIZABLE_12(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12); \
    template void serialize<cluster_version_t::v1_13_is_latest>(write_message_t *, const type_t &); \
    template archive_result_t deserialize<cluster_version_t::v1_13_is_latest>(read_stream_t *, type_t *)

#define RDB_MAKE_ME_SERIALIZABLE_12(field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12) \
    friend class write_message_t; \
    template <cluster_version_t W> \
    void rdb_serialize(write_message_t *wm) const { \
        serialize<W>(wm, field1); \
        serialize<W>(wm, field2); \
        serialize<W>(wm, field3); \
        serialize<W>(wm, field4); \
        serialize<W>(wm, field5); \
        serialize<W>(wm, field6); \
        serialize<W>(wm, field7); \
        serialize<W>(wm, field8); \
        serialize<W>(wm, field9); \
        serialize<W>(wm, field10); \
        serialize<W>(wm, field11); \
        serialize<W>(wm, field12); \
    } \
    template <cluster_version_t W> \
    archive_result_t rdb_deserialize(read_stream_t *s) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field11)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field12)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    friend class archive_deserializer_t

#define RDB_IMPL_ME_SERIALIZABLE_12(typ, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12) \
    template <cluster_version_t W> \
    void typ::rdb_serialize(write_message_t *wm) const { \
        serialize<W>(wm, field1); \
        serialize<W>(wm, field2); \
        serialize<W>(wm, field3); \
        serialize<W>(wm, field4); \
        serialize<W>(wm, field5); \
        serialize<W>(wm, field6); \
        serialize<W>(wm, field7); \
        serialize<W>(wm, field8); \
        serialize<W>(wm, field9); \
        serialize<W>(wm, field10); \
        serialize<W>(wm, field11); \
        serialize<W>(wm, field12); \
    } \
    template <cluster_version_t W> \
    archive_result_t typ::rdb_deserialize(read_stream_t *s) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field11)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field12)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    template void typ::rdb_serialize<cluster_version_t::v1_13_is_latest>(write_message_t *) const; \
    template archive_result_t typ::rdb_deserialize<cluster_version_t::v1_13_is_latest>(read_stream_t *s)

#define RDB_MAKE_SERIALIZABLE_13(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13) \
    template <cluster_version_t W> \
    void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
        serialize<W>(wm, thing.field3); \
        serialize<W>(wm, thing.field4); \
        serialize<W>(wm, thing.field5); \
        serialize<W>(wm, thing.field6); \
        serialize<W>(wm, thing.field7); \
        serialize<W>(wm, thing.field8); \
        serialize<W>(wm, thing.field9); \
        serialize<W>(wm, thing.field10); \
        serialize<W>(wm, thing.field11); \
        serialize<W>(wm, thing.field12); \
        serialize<W>(wm, thing.field13); \
    } \
    template <cluster_version_t W> \
    archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field11)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field12)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field13)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body
#define RDB_IMPL_SERIALIZABLE_13(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13) RDB_MAKE_SERIALIZABLE_13(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13); \
    template void serialize<cluster_version_t::v1_13_is_latest>(write_message_t *, const type_t &); \
    template archive_result_t deserialize<cluster_version_t::v1_13_is_latest>(read_stream_t *, type_t *)

#define RDB_MAKE_ME_SERIALIZABLE_13(field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13) \
    friend class write_message_t; \
    template <cluster_version_t W> \
    void rdb_serialize(write_message_t *wm) const { \
        serialize<W>(wm, field1); \
        serialize<W>(wm, field2); \
        serialize<W>(wm, field3); \
        serialize<W>(wm, field4); \
        serialize<W>(wm, field5); \
        serialize<W>(wm, field6); \
        serialize<W>(wm, field7); \
        serialize<W>(wm, field8); \
        serialize<W>(wm, field9); \
        serialize<W>(wm, field10); \
        serialize<W>(wm, field11); \
        serialize<W>(wm, field12); \
        serialize<W>(wm, field13); \
    } \
    template <cluster_version_t W> \
    archive_result_t rdb_deserialize(read_stream_t *s) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field11)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field12)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field13)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    friend class archive_deserializer_t

#define RDB_IMPL_ME_SERIALIZABLE_13(typ, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13) \
    template <cluster_version_t W> \
    void typ::rdb_serialize(write_message_t *wm) const { \
        serialize<W>(wm, field1); \
        serialize<W>(wm, field2); \
        serialize<W>(wm, field3); \
        serialize<W>(wm, field4); \
        serialize<W>(wm, field5); \
        serialize<W>(wm, field6); \
        serialize<W>(wm, field7); \
        serialize<W>(wm, field8); \
        serialize<W>(wm, field9); \
        serialize<W>(wm, field10); \
        serialize<W>(wm, field11); \
        serialize<W>(wm, field12); \
        serialize<W>(wm, field13); \
    } \
    template <cluster_version_t W> \
    archive_result_t typ::rdb_deserialize(read_stream_t *s) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field11)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field12)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field13)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    template void typ::rdb_serialize<cluster_version_t::v1_13_is_latest>(write_message_t *) const; \
    template archive_result_t typ::rdb_deserialize<cluster_version_t::v1_13_is_latest>(read_stream_t *s)

#define RDB_MAKE_SERIALIZABLE_14(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14) \
    template <cluster_version_t W> \
    void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
        serialize<W>(wm, thing.field3); \
        serialize<W>(wm, thing.field4); \
        serialize<W>(wm, thing.field5); \
        serialize<W>(wm, thing.field6); \
        serialize<W>(wm, thing.field7); \
        serialize<W>(wm, thing.field8); \
        serialize<W>(wm, thing.field9); \
        serialize<W>(wm, thing.field10); \
        serialize<W>(wm, thing.field11); \
        serialize<W>(wm, thing.field12); \
        serialize<W>(wm, thing.field13); \
        serialize<W>(wm, thing.field14); \
    } \
    template <cluster_version_t W> \
    archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field11)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field12)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field13)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field14)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body
#define RDB_IMPL_SERIALIZABLE_14(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14) RDB_MAKE_SERIALIZABLE_14(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14); \
    template void serialize<cluster_version_t::v1_13_is_latest>(write_message_t *, const type_t &); \
    template archive_result_t deserialize<cluster_version_t::v1_13_is_latest>(read_stream_t *, type_t *)

#define RDB_MAKE_ME_SERIALIZABLE_14(field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14) \
    friend class write_message_t; \
    template <cluster_version_t W> \
    void rdb_serialize(write_message_t *wm) const { \
        serialize<W>(wm, field1); \
        serialize<W>(wm, field2); \
        serialize<W>(wm, field3); \
        serialize<W>(wm, field4); \
        serialize<W>(wm, field5); \
        serialize<W>(wm, field6); \
        serialize<W>(wm, field7); \
        serialize<W>(wm, field8); \
        serialize<W>(wm, field9); \
        serialize<W>(wm, field10); \
        serialize<W>(wm, field11); \
        serialize<W>(wm, field12); \
        serialize<W>(wm, field13); \
        serialize<W>(wm, field14); \
    } \
    template <cluster_version_t W> \
    archive_result_t rdb_deserialize(read_stream_t *s) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field11)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field12)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field13)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field14)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    friend class archive_deserializer_t

#define RDB_IMPL_ME_SERIALIZABLE_14(typ, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14) \
    template <cluster_version_t W> \
    void typ::rdb_serialize(write_message_t *wm) const { \
        serialize<W>(wm, field1); \
        serialize<W>(wm, field2); \
        serialize<W>(wm, field3); \
        serialize<W>(wm, field4); \
        serialize<W>(wm, field5); \
        serialize<W>(wm, field6); \
        serialize<W>(wm, field7); \
        serialize<W>(wm, field8); \
        serialize<W>(wm, field9); \
        serialize<W>(wm, field10); \
        serialize<W>(wm, field11); \
        serialize<W>(wm, field12); \
        serialize<W>(wm, field13); \
        serialize<W>(wm, field14); \
    } \
    template <cluster_version_t W> \
    archive_result_t typ::rdb_deserialize(read_stream_t *s) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field11)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field12)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field13)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field14)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    template void typ::rdb_serialize<cluster_version_t::v1_13_is_latest>(write_message_t *) const; \
    template archive_result_t typ::rdb_deserialize<cluster_version_t::v1_13_is_latest>(read_stream_t *s)

#define RDB_MAKE_SERIALIZABLE_15(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15) \
    template <cluster_version_t W> \
    void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
        serialize<W>(wm, thing.field3); \
        serialize<W>(wm, thing.field4); \
        serialize<W>(wm, thing.field5); \
        serialize<W>(wm, thing.field6); \
        serialize<W>(wm, thing.field7); \
        serialize<W>(wm, thing.field8); \
        serialize<W>(wm, thing.field9); \
        serialize<W>(wm, thing.field10); \
        serialize<W>(wm, thing.field11); \
        serialize<W>(wm, thing.field12); \
        serialize<W>(wm, thing.field13); \
        serialize<W>(wm, thing.field14); \
        serialize<W>(wm, thing.field15); \
    } \
    template <cluster_version_t W> \
    archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field11)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field12)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field13)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field14)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field15)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body
#define RDB_IMPL_SERIALIZABLE_15(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15) RDB_MAKE_SERIALIZABLE_15(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15); \
    template void serialize<cluster_version_t::v1_13_is_latest>(write_message_t *, const type_t &); \
    template archive_result_t deserialize<cluster_version_t::v1_13_is_latest>(read_stream_t *, type_t *)

#define RDB_MAKE_ME_SERIALIZABLE_15(field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15) \
    friend class write_message_t; \
    template <cluster_version_t W> \
    void rdb_serialize(write_message_t *wm) const { \
        serialize<W>(wm, field1); \
        serialize<W>(wm, field2); \
        serialize<W>(wm, field3); \
        serialize<W>(wm, field4); \
        serialize<W>(wm, field5); \
        serialize<W>(wm, field6); \
        serialize<W>(wm, field7); \
        serialize<W>(wm, field8); \
        serialize<W>(wm, field9); \
        serialize<W>(wm, field10); \
        serialize<W>(wm, field11); \
        serialize<W>(wm, field12); \
        serialize<W>(wm, field13); \
        serialize<W>(wm, field14); \
        serialize<W>(wm, field15); \
    } \
    template <cluster_version_t W> \
    archive_result_t rdb_deserialize(read_stream_t *s) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field11)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field12)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field13)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field14)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field15)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    friend class archive_deserializer_t

#define RDB_IMPL_ME_SERIALIZABLE_15(typ, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15) \
    template <cluster_version_t W> \
    void typ::rdb_serialize(write_message_t *wm) const { \
        serialize<W>(wm, field1); \
        serialize<W>(wm, field2); \
        serialize<W>(wm, field3); \
        serialize<W>(wm, field4); \
        serialize<W>(wm, field5); \
        serialize<W>(wm, field6); \
        serialize<W>(wm, field7); \
        serialize<W>(wm, field8); \
        serialize<W>(wm, field9); \
        serialize<W>(wm, field10); \
        serialize<W>(wm, field11); \
        serialize<W>(wm, field12); \
        serialize<W>(wm, field13); \
        serialize<W>(wm, field14); \
        serialize<W>(wm, field15); \
    } \
    template <cluster_version_t W> \
    archive_result_t typ::rdb_deserialize(read_stream_t *s) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field11)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field12)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field13)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field14)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field15)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    template void typ::rdb_serialize<cluster_version_t::v1_13_is_latest>(write_message_t *) const; \
    template archive_result_t typ::rdb_deserialize<cluster_version_t::v1_13_is_latest>(read_stream_t *s)

#define RDB_MAKE_SERIALIZABLE_16(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16) \
    template <cluster_version_t W> \
    void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
        serialize<W>(wm, thing.field3); \
        serialize<W>(wm, thing.field4); \
        serialize<W>(wm, thing.field5); \
        serialize<W>(wm, thing.field6); \
        serialize<W>(wm, thing.field7); \
        serialize<W>(wm, thing.field8); \
        serialize<W>(wm, thing.field9); \
        serialize<W>(wm, thing.field10); \
        serialize<W>(wm, thing.field11); \
        serialize<W>(wm, thing.field12); \
        serialize<W>(wm, thing.field13); \
        serialize<W>(wm, thing.field14); \
        serialize<W>(wm, thing.field15); \
        serialize<W>(wm, thing.field16); \
    } \
    template <cluster_version_t W> \
    archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field11)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field12)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field13)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field14)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field15)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field16)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body
#define RDB_IMPL_SERIALIZABLE_16(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16) RDB_MAKE_SERIALIZABLE_16(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16); \
    template void serialize<cluster_version_t::v1_13_is_latest>(write_message_t *, const type_t &); \
    template archive_result_t deserialize<cluster_version_t::v1_13_is_latest>(read_stream_t *, type_t *)

#define RDB_MAKE_ME_SERIALIZABLE_16(field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16) \
    friend class write_message_t; \
    template <cluster_version_t W> \
    void rdb_serialize(write_message_t *wm) const { \
        serialize<W>(wm, field1); \
        serialize<W>(wm, field2); \
        serialize<W>(wm, field3); \
        serialize<W>(wm, field4); \
        serialize<W>(wm, field5); \
        serialize<W>(wm, field6); \
        serialize<W>(wm, field7); \
        serialize<W>(wm, field8); \
        serialize<W>(wm, field9); \
        serialize<W>(wm, field10); \
        serialize<W>(wm, field11); \
        serialize<W>(wm, field12); \
        serialize<W>(wm, field13); \
        serialize<W>(wm, field14); \
        serialize<W>(wm, field15); \
        serialize<W>(wm, field16); \
    } \
    template <cluster_version_t W> \
    archive_result_t rdb_deserialize(read_stream_t *s) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field11)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field12)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field13)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field14)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field15)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field16)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    friend class archive_deserializer_t

#define RDB_IMPL_ME_SERIALIZABLE_16(typ, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16) \
    template <cluster_version_t W> \
    void typ::rdb_serialize(write_message_t *wm) const { \
        serialize<W>(wm, field1); \
        serialize<W>(wm, field2); \
        serialize<W>(wm, field3); \
        serialize<W>(wm, field4); \
        serialize<W>(wm, field5); \
        serialize<W>(wm, field6); \
        serialize<W>(wm, field7); \
        serialize<W>(wm, field8); \
        serialize<W>(wm, field9); \
        serialize<W>(wm, field10); \
        serialize<W>(wm, field11); \
        serialize<W>(wm, field12); \
        serialize<W>(wm, field13); \
        serialize<W>(wm, field14); \
        serialize<W>(wm, field15); \
        serialize<W>(wm, field16); \
    } \
    template <cluster_version_t W> \
    archive_result_t typ::rdb_deserialize(read_stream_t *s) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field11)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field12)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field13)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field14)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field15)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field16)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    template void typ::rdb_serialize<cluster_version_t::v1_13_is_latest>(write_message_t *) const; \
    template archive_result_t typ::rdb_deserialize<cluster_version_t::v1_13_is_latest>(read_stream_t *s)

#define RDB_MAKE_SERIALIZABLE_17(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17) \
    template <cluster_version_t W> \
    void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
        serialize<W>(wm, thing.field3); \
        serialize<W>(wm, thing.field4); \
        serialize<W>(wm, thing.field5); \
        serialize<W>(wm, thing.field6); \
        serialize<W>(wm, thing.field7); \
        serialize<W>(wm, thing.field8); \
        serialize<W>(wm, thing.field9); \
        serialize<W>(wm, thing.field10); \
        serialize<W>(wm, thing.field11); \
        serialize<W>(wm, thing.field12); \
        serialize<W>(wm, thing.field13); \
        serialize<W>(wm, thing.field14); \
        serialize<W>(wm, thing.field15); \
        serialize<W>(wm, thing.field16); \
        serialize<W>(wm, thing.field17); \
    } \
    template <cluster_version_t W> \
    archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field11)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field12)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field13)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field14)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field15)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field16)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field17)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body
#define RDB_IMPL_SERIALIZABLE_17(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17) RDB_MAKE_SERIALIZABLE_17(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17); \
    template void serialize<cluster_version_t::v1_13_is_latest>(write_message_t *, const type_t &); \
    template archive_result_t deserialize<cluster_version_t::v1_13_is_latest>(read_stream_t *, type_t *)

#define RDB_MAKE_ME_SERIALIZABLE_17(field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17) \
    friend class write_message_t; \
    template <cluster_version_t W> \
    void rdb_serialize(write_message_t *wm) const { \
        serialize<W>(wm, field1); \
        serialize<W>(wm, field2); \
        serialize<W>(wm, field3); \
        serialize<W>(wm, field4); \
        serialize<W>(wm, field5); \
        serialize<W>(wm, field6); \
        serialize<W>(wm, field7); \
        serialize<W>(wm, field8); \
        serialize<W>(wm, field9); \
        serialize<W>(wm, field10); \
        serialize<W>(wm, field11); \
        serialize<W>(wm, field12); \
        serialize<W>(wm, field13); \
        serialize<W>(wm, field14); \
        serialize<W>(wm, field15); \
        serialize<W>(wm, field16); \
        serialize<W>(wm, field17); \
    } \
    template <cluster_version_t W> \
    archive_result_t rdb_deserialize(read_stream_t *s) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field11)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field12)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field13)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field14)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field15)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field16)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field17)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    friend class archive_deserializer_t

#define RDB_IMPL_ME_SERIALIZABLE_17(typ, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17) \
    template <cluster_version_t W> \
    void typ::rdb_serialize(write_message_t *wm) const { \
        serialize<W>(wm, field1); \
        serialize<W>(wm, field2); \
        serialize<W>(wm, field3); \
        serialize<W>(wm, field4); \
        serialize<W>(wm, field5); \
        serialize<W>(wm, field6); \
        serialize<W>(wm, field7); \
        serialize<W>(wm, field8); \
        serialize<W>(wm, field9); \
        serialize<W>(wm, field10); \
        serialize<W>(wm, field11); \
        serialize<W>(wm, field12); \
        serialize<W>(wm, field13); \
        serialize<W>(wm, field14); \
        serialize<W>(wm, field15); \
        serialize<W>(wm, field16); \
        serialize<W>(wm, field17); \
    } \
    template <cluster_version_t W> \
    archive_result_t typ::rdb_deserialize(read_stream_t *s) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field11)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field12)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field13)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field14)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field15)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field16)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field17)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    template void typ::rdb_serialize<cluster_version_t::v1_13_is_latest>(write_message_t *) const; \
    template archive_result_t typ::rdb_deserialize<cluster_version_t::v1_13_is_latest>(read_stream_t *s)

#define RDB_MAKE_SERIALIZABLE_18(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18) \
    template <cluster_version_t W> \
    void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
        serialize<W>(wm, thing.field3); \
        serialize<W>(wm, thing.field4); \
        serialize<W>(wm, thing.field5); \
        serialize<W>(wm, thing.field6); \
        serialize<W>(wm, thing.field7); \
        serialize<W>(wm, thing.field8); \
        serialize<W>(wm, thing.field9); \
        serialize<W>(wm, thing.field10); \
        serialize<W>(wm, thing.field11); \
        serialize<W>(wm, thing.field12); \
        serialize<W>(wm, thing.field13); \
        serialize<W>(wm, thing.field14); \
        serialize<W>(wm, thing.field15); \
        serialize<W>(wm, thing.field16); \
        serialize<W>(wm, thing.field17); \
        serialize<W>(wm, thing.field18); \
    } \
    template <cluster_version_t W> \
    archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field11)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field12)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field13)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field14)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field15)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field16)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field17)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field18)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body
#define RDB_IMPL_SERIALIZABLE_18(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18) RDB_MAKE_SERIALIZABLE_18(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18); \
    template void serialize<cluster_version_t::v1_13_is_latest>(write_message_t *, const type_t &); \
    template archive_result_t deserialize<cluster_version_t::v1_13_is_latest>(read_stream_t *, type_t *)

#define RDB_MAKE_ME_SERIALIZABLE_18(field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18) \
    friend class write_message_t; \
    template <cluster_version_t W> \
    void rdb_serialize(write_message_t *wm) const { \
        serialize<W>(wm, field1); \
        serialize<W>(wm, field2); \
        serialize<W>(wm, field3); \
        serialize<W>(wm, field4); \
        serialize<W>(wm, field5); \
        serialize<W>(wm, field6); \
        serialize<W>(wm, field7); \
        serialize<W>(wm, field8); \
        serialize<W>(wm, field9); \
        serialize<W>(wm, field10); \
        serialize<W>(wm, field11); \
        serialize<W>(wm, field12); \
        serialize<W>(wm, field13); \
        serialize<W>(wm, field14); \
        serialize<W>(wm, field15); \
        serialize<W>(wm, field16); \
        serialize<W>(wm, field17); \
        serialize<W>(wm, field18); \
    } \
    template <cluster_version_t W> \
    archive_result_t rdb_deserialize(read_stream_t *s) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field11)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field12)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field13)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field14)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field15)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field16)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field17)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field18)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    friend class archive_deserializer_t

#define RDB_IMPL_ME_SERIALIZABLE_18(typ, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18) \
    template <cluster_version_t W> \
    void typ::rdb_serialize(write_message_t *wm) const { \
        serialize<W>(wm, field1); \
        serialize<W>(wm, field2); \
        serialize<W>(wm, field3); \
        serialize<W>(wm, field4); \
        serialize<W>(wm, field5); \
        serialize<W>(wm, field6); \
        serialize<W>(wm, field7); \
        serialize<W>(wm, field8); \
        serialize<W>(wm, field9); \
        serialize<W>(wm, field10); \
        serialize<W>(wm, field11); \
        serialize<W>(wm, field12); \
        serialize<W>(wm, field13); \
        serialize<W>(wm, field14); \
        serialize<W>(wm, field15); \
        serialize<W>(wm, field16); \
        serialize<W>(wm, field17); \
        serialize<W>(wm, field18); \
    } \
    template <cluster_version_t W> \
    archive_result_t typ::rdb_deserialize(read_stream_t *s) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field11)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field12)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field13)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field14)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field15)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field16)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field17)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field18)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    template void typ::rdb_serialize<cluster_version_t::v1_13_is_latest>(write_message_t *) const; \
    template archive_result_t typ::rdb_deserialize<cluster_version_t::v1_13_is_latest>(read_stream_t *s)

#define RDB_MAKE_SERIALIZABLE_19(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18, field19) \
    template <cluster_version_t W> \
    void serialize(write_message_t *wm, const type_t &thing) { \
        serialize<W>(wm, thing.field1); \
        serialize<W>(wm, thing.field2); \
        serialize<W>(wm, thing.field3); \
        serialize<W>(wm, thing.field4); \
        serialize<W>(wm, thing.field5); \
        serialize<W>(wm, thing.field6); \
        serialize<W>(wm, thing.field7); \
        serialize<W>(wm, thing.field8); \
        serialize<W>(wm, thing.field9); \
        serialize<W>(wm, thing.field10); \
        serialize<W>(wm, thing.field11); \
        serialize<W>(wm, thing.field12); \
        serialize<W>(wm, thing.field13); \
        serialize<W>(wm, thing.field14); \
        serialize<W>(wm, thing.field15); \
        serialize<W>(wm, thing.field16); \
        serialize<W>(wm, thing.field17); \
        serialize<W>(wm, thing.field18); \
        serialize<W>(wm, thing.field19); \
    } \
    template <cluster_version_t W> \
    archive_result_t deserialize(read_stream_t *s, type_t *thing) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(thing->field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field11)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field12)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field13)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field14)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field15)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field16)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field17)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field18)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(thing->field19)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    extern int dont_use_RDB_MAKE_SERIALIZABLE_within_a_class_body
#define RDB_IMPL_SERIALIZABLE_19(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18, field19) RDB_MAKE_SERIALIZABLE_19(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18, field19); \
    template void serialize<cluster_version_t::v1_13_is_latest>(write_message_t *, const type_t &); \
    template archive_result_t deserialize<cluster_version_t::v1_13_is_latest>(read_stream_t *, type_t *)

#define RDB_MAKE_ME_SERIALIZABLE_19(field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18, field19) \
    friend class write_message_t; \
    template <cluster_version_t W> \
    void rdb_serialize(write_message_t *wm) const { \
        serialize<W>(wm, field1); \
        serialize<W>(wm, field2); \
        serialize<W>(wm, field3); \
        serialize<W>(wm, field4); \
        serialize<W>(wm, field5); \
        serialize<W>(wm, field6); \
        serialize<W>(wm, field7); \
        serialize<W>(wm, field8); \
        serialize<W>(wm, field9); \
        serialize<W>(wm, field10); \
        serialize<W>(wm, field11); \
        serialize<W>(wm, field12); \
        serialize<W>(wm, field13); \
        serialize<W>(wm, field14); \
        serialize<W>(wm, field15); \
        serialize<W>(wm, field16); \
        serialize<W>(wm, field17); \
        serialize<W>(wm, field18); \
        serialize<W>(wm, field19); \
    } \
    template <cluster_version_t W> \
    archive_result_t rdb_deserialize(read_stream_t *s) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field11)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field12)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field13)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field14)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field15)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field16)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field17)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field18)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field19)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    friend class archive_deserializer_t

#define RDB_IMPL_ME_SERIALIZABLE_19(typ, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18, field19) \
    template <cluster_version_t W> \
    void typ::rdb_serialize(write_message_t *wm) const { \
        serialize<W>(wm, field1); \
        serialize<W>(wm, field2); \
        serialize<W>(wm, field3); \
        serialize<W>(wm, field4); \
        serialize<W>(wm, field5); \
        serialize<W>(wm, field6); \
        serialize<W>(wm, field7); \
        serialize<W>(wm, field8); \
        serialize<W>(wm, field9); \
        serialize<W>(wm, field10); \
        serialize<W>(wm, field11); \
        serialize<W>(wm, field12); \
        serialize<W>(wm, field13); \
        serialize<W>(wm, field14); \
        serialize<W>(wm, field15); \
        serialize<W>(wm, field16); \
        serialize<W>(wm, field17); \
        serialize<W>(wm, field18); \
        serialize<W>(wm, field19); \
    } \
    template <cluster_version_t W> \
    archive_result_t typ::rdb_deserialize(read_stream_t *s) { \
        archive_result_t res = archive_result_t::SUCCESS; \
        res = deserialize<W>(s, deserialize_deref(field1)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field2)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field3)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field4)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field5)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field6)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field7)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field8)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field9)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field10)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field11)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field12)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field13)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field14)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field15)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field16)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field17)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field18)); \
        if (bad(res)) { return res; } \
        res = deserialize<W>(s, deserialize_deref(field19)); \
        if (bad(res)) { return res; } \
        return res; \
    } \
    template void typ::rdb_serialize<cluster_version_t::v1_13_is_latest>(write_message_t *) const; \
    template archive_result_t typ::rdb_deserialize<cluster_version_t::v1_13_is_latest>(read_stream_t *s)

#endif // RPC_SERIALIZE_MACROS_HPP_
