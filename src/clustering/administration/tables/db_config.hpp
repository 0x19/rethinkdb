// Copyright 2010-2014 RethinkDB, all rights reserved.
#ifndef CLUSTERING_ADMINISTRATION_TABLES_DB_CONFIG_HPP_
#define CLUSTERING_ADMINISTRATION_TABLES_DB_CONFIG_HPP_

#include <string>
#include <vector>

#include "errors.hpp"
#include <boost/shared_ptr.hpp>

#include "clustering/administration/tables/database_metadata.hpp"
#include "containers/uuid.hpp"
#include "rdb_protocol/artificial_table/caching_cfeed_backend.hpp"
#include "rpc/semilattice/view.hpp"

class db_config_artificial_table_backend_t :
    public caching_cfeed_artificial_table_backend_t
{
public:
    db_config_artificial_table_backend_t(
            boost::shared_ptr< semilattice_readwrite_view_t<
                databases_semilattice_metadata_t> > _database_sl_view);
    ~db_config_artificial_table_backend_t();

    std::string get_primary_key_name();

    bool read_all_rows_as_vector(
            signal_t *interruptor,
            std::vector<ql::datum_t> *rows_out,
            std::string *error_out);

    bool read_row(
            ql::datum_t primary_key,
            signal_t *interruptor,
            ql::datum_t *row_out,
            std::string *error_out);

    bool write_row(
            ql::datum_t primary_key,
            bool pkey_is_autogenerated,
            ql::datum_t *new_value_inout,
            signal_t *interruptor,
            std::string *error_out);

private:
    boost::shared_ptr< semilattice_readwrite_view_t<
        databases_semilattice_metadata_t> > database_sl_view;
    semilattice_read_view_t<databases_semilattice_metadata_t>::subscription_t subs;
};

#endif /* CLUSTERING_ADMINISTRATION_TABLES_DB_CONFIG_HPP_ */

