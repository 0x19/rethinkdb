#!/bin/sh
# Copyright 2015 RethinkDB.
# Portions from Frank Trampe and Novell used with permission.

### BEGIN INIT INFO
# Provides:          rethinkdb
# Required-Start:    $remote_fs
# Required-Stop:     $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: This starts a RethinkDB server
# Description:       Launches the RethinkDB server configured in /etc/rethinkdb/server.conf
### END INIT INFO

set -e -u
umask 022

rethinkdb_bin=/usr/bin/rethinkdb
rethinkdb_conf_dir=/etc/rethinkdb
rethinkdb_pid_file=/var/run/rethinkdb.pid
rethinkdb_log_file=/var/log/rethinkdb.log
rethinkdb_conf_file="$rethinkdb_conf_dir/server.conf"

# is_running <pid>
# test if the process exists
is_running () {
    ps -p "$1" > /dev/null
}

usage_fail () {
    echo "Usage: /etc/init.d/rethinkdb [start|stop|restart|force-restart|status|upgrade-config]"
    exit 1
}

if [ ! -d "$rethinkdb_conf_dir/instances.d" ]; then # Post-2.1 config

start () {
    if [ -e "$rethinkdb_pid_file" ]; then
        if is_running "`cat "$rethinkdb_pid_file"`"; then
            echo "rethinkdb: The server has already started"
        else
            rm "$rethinkdb_pid_file"
        fi
    fi
    if ! [ -e "$rethinkdb_conf_file" ]; then
        echo "rethinkdb: Not starting: missing config file \`$rethinkdb_conf_file'" >&2
        exit 1
    fi
    echo "rethinkdb: Starting server. (logging to \`$rethinkdb_log_file')"
    cd /var/lib/rethinkdb
    $rethinkdb_bin --config-file "$rethinkdb_conf_file" --log-file "$rethinkdb_log_file" --pid-file "$rethinkdb_pid_file" --daemon
}

stop () {
    if ! [ -e "$rethinkdb_pid_file" ] ; then
        echo "rethinkdb: The server is not running (there is no pid file)"
        exit 1
    fi
    rethinkdb_pid="`cat "$rethinkdb_pid_file"`"
    if is_running "$rethinkdb_pid"; then
        echo -n "rethinkdb: Waiting for server to stop (pid $rethinkdb_pid) ..."
        kill -INT "$rethinkdb_pid"
        while is_running "$rethinkdb_pid"; do
            echo -n "."
            sleep 1
        done
        echo " Stopped."
    else
        rm -f "$rethinkdb_pid"
    fi
}

status () {
    if [ -e "$rethinkdb_pid_file" ] ; then
        rethinkdb_pid="`cat "$rethinkdb_pid_file"`"
        if ! is_running "$rethinkdb_pid"; then
            echo "rethinkdb: stop/crashed"
        else
            echo "rethinkdb: start/running, pid `cat "$rethinkdb_pid_file"`"
        fi
    else
        echo "rethinkdb: stop/waiting"
    fi
}

case "$0" in
    start|force-start) start ;;
    stop|force-stop) stop ;;
    restart|force-restart) stop; start ;;
    status) status ;;

    upgrade-config) echo "$0: Nothing to do" ;;

    "") usage_fail ;;
    *) echo "$0: error: unknown action $1" >&2
       usage_fail ;;
esac

else ############## Deprecated pre-2.1 config ##############

rtdbconfigdir="$rethinkdb_conf_dir"
rtdbbin="$rethinkdb_bin"

itask="${1:-}"

# parse a line from the config file
conf_read_line () {
    local _val="${1#*=}"
    local _key="${1%%=*}"
    if [ "$_val" = "$1" ]; then
        unset -v $2
        unset -v $3
        false
    else
        read -r $2 <<EOF
`echo $_key`
EOF
        read -r $3 <<EOF
${_val# }
EOF
    fi
}

# conf_read <file> <var>
# read the config file file into the variable var
conf_read () {
    local _dict="#"
    local line sect key val
    while read -r full_line; do
        line=${full_line%%#*}
        if conf_read_line "$line" key val; then
            _dict="$_dict$key=$val#"
        elif [ "`echo -n $line`" != "" ]; then
            # ignore parse errors
            true
        fi
    done < $1 && read -r $2 <<EOF
$_dict
EOF
}

# get <conf> <key> [var]
# extract the value of key from the parsed config conf
# into the variable var or if var is not passed, into the variable key
get () {
    local _valp="${1#*#$2=}"
    local _val="${_valp%%#*}"
    if [ "$_valp" = "$1" ]; then
        unset -v ${3:-$2}
        return 1
    else
        read -r ${3:-$2} <<EOF
$_val
EOF
    fi
}

default_ports_available=true

default_driver_port=28015
default_cluster_port=29015
default_http_port=8080
default_port_offset=0

upgrade_config () {
    set -- "$rethinkdb_conf_dir"/instances.d/*.conf
    if [ "$1" == "$rethinkdb_conf_dir/instances.d/*.conf" ]; then
        echo "rethinkdb: No instances defined. Removing \`$rethinkdb_conf_dir/instances.d'"
        rmdir "$rethinkdb_conf_dir/instances.d"
        exit
    fi
    if [ $# != 1 ]; then
        echo "rethinkdb: Refusing to upgrade: multiple instances are defined."
        echo "rethinkdb: Remove all but one of the conf files in \`$rethinkdb_conf_dir/instances.d' before upgrading."
        exit 1
    fi
    generated_field=
    instance_name=`basename "$1" .conf`
    if ! conf_read "$1" conf; then
        echo "rethinkdb: Could not parse configuration file \`$1'."
        exit 1
    fi
    if ! get "$conf" pid-file rtdbpidfile; then
        echo "rethinkdb: Cannot upgrade: \`$1' uses a custom pid-file"
    fi
    if ! get "$conf" log-file rtdblogfile; then
        echo "rethinkdb: Cannot upgrade: \`$1' uses a custom log-file"
    fi
    if ! get "$conf" directory rtdb_directory; then
        generated_field="directory=/var/lib/rethinkdb/$instance_name/data"
    fi
    if [ -e "$rethinkdb_conf_file" ]; then
        echo "rethinkdb: Backing up \`$rethinkdb_conf_file' to \`$rethinkdb_conf_file.old'"
        mv -i "$rethinkdb_conf_file" "$rethinkdb_conf_file.old"
    fi
    echo "rethinkdb: Saving new config to \`$rethinkdb_conf_file'"
    (   cat "$1";
        echo "$generated_field"
    ) > "$rethinkdb_conf_file"
    if ! rmdir "$rethinkdb_conf_dir"/instances.d; then
        echo "rethinkdb: Could not remove \`$rethinkdb_conf_dir/instances.d', moving to \`"$rethinkdb_conf_dir"/instances.d.backup'"
        mv -i "$rethinkdb_conf_dir"/instances.d "$rethinkdb_conf_dir"/instances.d.backup
    fi
}

case "$itask" in
    start|stop|restart|force-restart|status)
        true
        ;;
    upgrade-config)
        upgrade_config
        exit
        ;;
    "")
        usage_fail
        ;;
    *)
        echo "$0: error: unknown action $1"
        usage_fail
        ;;
esac

# We check for active configurations .
if ! ls "$rtdbconfigdir"/instances.d/*.conf >/dev/null 2>/dev/null ; then
    echo "rethinkdb: No instances defined in $rtdbconfigdir/instances.d/"
    echo "rethinkdb: See http://www.rethinkdb.com/docs/guides/startup/ for more information" ;
    exit
fi

for rtdbconffile in "$rtdbconfigdir"/instances.d/*.conf ;
do

    echo "rethinkdb: warning: using a deprecated config file '$rtdbconffile'. Run \`$0 upgrade-config' to upgrade." >&2

    if ! conf_read "$rtdbconffile" conf; then
        continue
    fi

    instance_name=`basename "$rtdbconffile" .conf`

    # $@ will contain the options we pass to rethinkdb
    set --
    set -- --config-file "$rtdbconffile"

    if ! get "$conf" runuser; then
        runuser=rethinkdb
        set -- "$@" --runuser "$runuser"
    fi
    if ! get "$conf" rungroup; then
        rungroup=rethinkdb
        set -- "$@" --rungroup "$rungroup"
    fi

    # If no pid file is specified, assign one and make sure the parent folder has the correct permissions
    if ! get "$conf" pid-file rtdbpidfile; then
        rtdbpidfile="/var/run/rethinkdb/$instance_name/pid_file"
    fi
    if [ -d /var/run -a "${rtdbpidfile#/var/run/}" != "$rtdbpidfile" ]; then
        parent_directory="`dirname "$rtdbpidfile"`"
        if [ ! -e "$parent_directory" ]; then
            if mkdir -p "$parent_directory"; then
                test -n "${runuser:-}"  && chown -- "$runuser"  "$parent_directory"
                test -n "${rungroup:-}" && chgrp -- "$rungroup" "$parent_directory"
            fi
        fi

        set -- "$@" --pid-file "$rtdbpidfile"
    fi

    # If no data directory is specified, assign one and make sure it has the correct permissions
    if ! get "$conf" directory rtdb_directory; then
        rtdb_directory="/var/lib/rethinkdb/$instance_name/data"
        parent_directory="/var/lib/rethinkdb/$instance_name"
        if [ ! -e "$parent_directory" ]; then
            if mkdir -p "$parent_directory"; then
                test -n "${runuser:-}"  && chown -- "$runuser"  "$parent_directory"
                test -n "${rungroup:-}" && chgrp -- "$rungroup" "$parent_directory"
            fi
        fi
        set -- "$@" --directory "$rtdb_directory"
    fi

    # Only one of the instances can use the default ports
    get "$conf" driver-port driver_port || :
    get "$conf" cluster-port cluster_port || :
    get "$conf" http-port http_port || :
    get "$conf" port-offset port_offset || :
    port_offset=${port_offset:-0}
    if [ "${driver_port:-$((default_driver_port+port_offset))}" = "$default_driver_port" -o \
         "${cluster_port:-$((default_cluster_port+port_offset))}" = "$default_cluster_port" -o \
         "${http-port:-$((default_http_port+port_offset))}" = "$default_http_port" ]; then
        if $default_ports_available; then
            default_ports_available=false
        else
            echo "rethinkdb: $instance_name: error: the default ports are already used by another instance"
            echo "rethinkdb: $instance_name: error: please use non-default values for driver-port, cluster-port and http-port in $rtdbconffile"
            continue
        fi
    fi

    if [ "$itask" = "stop" -o "$itask" = "restart" -o "$itask" = "force-restart" ] ; then
        # stop rethinkdb

        if [ ! -e "$rtdbpidfile" ] ; then
            echo "rethinkdb: $instance_name: The instance is not running (there is no pid file)"
        elif is_running "`cat "$rtdbpidfile"`" ; then
            echo -n "rethinkdb: $instance_name: Waiting for instance to stop (pid `cat "$rtdbpidfile"`) ..."
            instance_pid=`cat "$rtdbpidfile"`
            kill -INT "$instance_pid"
            while is_running "$instance_pid"; do
                echo -n "."
                sleep 1
            done
            echo " Stopped."
        else
            rm -f "$rtdbpidfile"
        fi
    fi

    if [ "$itask" = "start" -o "$itask" = "restart" -o "$itask" = "force-restart" ] ; then
        # start rethinkdb

        if ! get "$conf" bind x; then
            echo "rethinkdb: $instance_name: will only listen on local network interfaces."
            echo "rethinkdb: $instance_name: To expose rethinkdb on the network, add the 'bind=all' option to $rtdbconffile"
        fi

        if [ -e "$rtdbpidfile" ] && is_running "$(cat "$rtdbpidfile")"; then
            echo "rethinkdb: $instance_name: The instance has already started"
        else
            if [ -e "$rtdbpidfile" ] ; then
                rm "$rtdbpidfile"
            fi
            if ! get "$conf" log-file rtdblogfile; then
                rtdblogfile=$rtdb_directory/log_file
            fi
            echo "rethinkdb: $instance_name: Starting instance. (logging to \`$rtdblogfile')"
            "$rtdbbin" --daemon "$@"
        fi
    fi

    if [ "$itask" = "status" ] ; then
        # show the rethinkdb status

        if [ -e "$rtdbpidfile" ] ; then
            if ! is_running "$(cat "$rtdbpidfile")"; then
                echo "rethinkdb: $instance_name: stop/crashed"
            else
                echo "rethinkdb: $instance_name: start/running, pid `cat "$rtdbpidfile"`"
            fi
        else
            echo "rethinkdb: $instance_name: stop/waiting"
        fi
    fi
done

fi
